#!/bin/bash
#
# https://github.com/Aniverse/inexistence
# Author: Aniverse
#
script_update=2020.03.17
script_version=r12056
################################################################################################ Usage Guide

usage_guide() {
s=/etc/inexistence/00.Installation/function;rm -f $s ; nano $s

wget -q https://github.com/Aniverse/inexistence/raw/master/00.Installation/function -O /etc/inexistence/00.Installation/function

if [[ -f /etc/inexistence/00.Installation/function ]]; then
    source /etc/inexistence/00.Installation/function
else
    source <(wget -qO- https://github.com/Aniverse/inexistence/raw/master/00.Installation/function)
fi
}

################################################################################################ Get options

OPTS=$(getopt -o o: -al output: -- "$@")
eval set -- "$OPTS"

while [ -n "$1" ] ; do case "$1" in
    -o | --output ) OutputLOG="$2" ; shift 2 ;;
    -- ) break ;;
esac ; done

################################################################################################ Colors

black=$(tput setaf 0)    ; red=$(tput setaf 1)          ; green=$(tput setaf 2)    ; yellow=$(tput setaf 3) ;  bold=$(tput bold)
blue=$(tput setaf 4)     ; magenta=$(tput setaf 5)      ; cyan=$(tput setaf 6)     ; white=$(tput setaf 7)  ;  normal=$(tput sgr0)
on_black=$(tput setab 0) ; on_red=$(tput setab 1)       ; on_green=$(tput setab 2) ; on_yellow=$(tput setab 3)
on_blue=$(tput setab 4)  ; on_magenta=$(tput setab 5)   ; on_cyan=$(tput setab 6)  ; on_white=$(tput setab 7)
shanshuo=$(tput blink)   ; wuguangbiao=$(tput civis)    ; guangbiao=$(tput cnorm)  ; jiacu=${normal}${bold}
underline=$(tput smul)   ; reset_underline=$(tput rmul) ; dim=$(tput dim)
standout=$(tput smso)    ; reset_standout=$(tput rmso)  ; title=${standout}
baihuangse=${white}${on_yellow} ; bailanse=${white}${on_blue} ; bailvse=${white}${on_green}
baiqingse=${white}${on_cyan}    ; baihongse=${white}${on_red} ; baizise=${white}${on_magenta}
heibaise=${black}${on_white}    ; heihuangse=${on_yellow}${black}
CW="${bold}${baihongse} ERROR ${jiacu}" ; ZY="${baihongse}${bold} ATTENTION ${jiacu}" ; JG="${baihongse}${bold} WARNING ${jiacu}"

################################################################################################

LogBase=/log/inexistence
LogRootPath=/log/inexistence
LOCKLocation=$LogBase/lock
PortLocation=$LogBase/port
inexistence_url="https://github.com/Aniverse/inexistence"
inexistence_branch=master
local_repo=/etc/inexistence
local_packages=$local_repo/00.Installation
local_script=/usr/local/bin/abox
web_root=/var/www
web_rutorrent=/var/www/rutorrent

self_location="$0"
arch=$(uname -m)
DISTRO=$(awk -F'[= "]' '/PRETTY_NAME/{print $3}' /etc/os-release)
DISTROL=$(echo $DISTRO | tr 'A-Z' 'a-z')
CODENAME=$( cat /etc/os-release | grep VERSION= | tr '[A-Z]' '[a-z]' | sed 's/\"\|(\|)\|[0-9.,]\|version\|lts//g' | awk '{print $2}' )
[[ $DISTRO == Ubuntu ]] && osversion=$(grep Ubuntu /etc/issue | head -1 | grep -oE  "[0-9.]+")
[[ $DISTRO == Debian ]] && osversion=$(cat /etc/debian_version)
export TZ=/usr/share/zoneinfo/Asia/Shanghai
export DEBIAN_FRONTEND=noninteractive
export APT_LISTCHANGES_FRONTEND=none
[[ -z $MAXCPUS ]] && MAXCPUS=$(nproc)
tmp_dir=/tmp

if [[ $MAXCPUS == 1 ]]; then
    unset compile_flag_threads
else
    compile_flag_threads=-j$MAXCPUS
fi

################################################################################################ Shared seedbox check

if [[ $shared == 1 ]]; then
    iUser=$(whoami)
    tmp_dir=$HOME/.tmp
    mkdir -p $tmp_dir
    if [[ $(pgrep systemd) ]]; then
        export user_systemd=1
        mkdir -p $HOME/.config/systemd/user
    fi
fi

################################################################################################
################################################################################################ Basic functions
################################################################################################

# ⚠ ✗ ✓
function _excute() {
    echo -e "$1\n" >> "$OutputLOG" 2>&1
	($1 >> "$OutputLOG" 2>&1)
}
function echo_task() {
	# echo -ne "$1" | tee -a $OutputLOG
    printf "%s" "$@" | tee -a $OutputLOG
}
function status_done() {
	echo -e " ${green}${bold}DONE${normal}" | tee -a $OutputLOG
}
function status_failed() {
	echo -e " ${red}${bold}FAILED${normal}" | tee -a $OutputLOG
}
function echo_warning() {
    printf " ${yellow}${bold}WARNING: %s${normal}\n" "$@" | tee -a $OutputLOG
}
function echo_error() {
    printf " ${red}${bold}ERROR: %s${normal}\n" "$@" | tee -a $OutputLOG       # ; exit 1
}
function echo_info() {
    printf " ${cyan}${bold}Info: %s${normal}\n" "$@" | tee -a $OutputLOG
}

# These codes are from teddysun bbr.sh
function version_ge(){ test "$(echo "$@" | tr " " "\n" | sort -rV | head -1)" == "$1" ; }
function version_gt(){ test "$(printf '%s\n' "$@" | sort -V | head -1)" != "$1"; }

# These codes are from teddysun bench.sh
function lines()  { printf "%-100s\n" "-" | sed 's/\s/-/g' ; }
function lines2() { echo ; printf "%-100s\n" "-" | sed 's/\s/-/g' ; echo ; }

# These codes are from rtinst
# (Check if a web site is reachable)
function check_url() {
    if [[ `wget -S --spider $1 2>&1 | grep 'HTTP/1.1 200 OK'` ]]; then return 0 ; else return 1 ; fi
}


# These codes are from QuickBox
function spinner() {
    local pid=$1
    local delay=0.25
    local spinstr='|/-\'
    while [ "$(ps a | awk '{print $1}' | grep $pid)" ]; do
        local temp=${spinstr#?}
        printf " [${bold}${yellow}%c${normal}]  " "$spinstr"
        local spinstr=$temp${spinstr%"$temp"}
        sleep $delay
        printf "\b\b\b\b\b\b"
    done
    printf "    \b\b\b\b"
}


function check_var_OutputLOG() {
    if [[ -z $OutputLOG ]]; then
        echo -e "${CW} NO OutputLOG variable found, please check if you have function installed"
        exit 1
    fi
}


function check_status() {
    # When install_app & spinner $!, the variable $status_lock will not be passed to the install script, so we use another file to source
    if [[ -f $tmp_dir/Variables ]]; then
        source $tmp_dir/Variables
    fi

    if [[ -z "${status_lock}" ]]; then
        # echo -e " ${red}${bold}ERROR: No Variables${normal}"
        echo_error "No Variables"
    elif [[ -f $tmp_dir/"${status_lock}".1.lock ]]; then
        # echo -e " ${green}${bold}DONE${normal}"
        status_done
    elif [[ -f $tmp_dir/"${status_lock}".2.lock ]]; then
        # echo -e " ${red}${bold}FAILED${normal}"
        status_failed
    else
        # echo -e " ${red}${bold}ERROR: Unknown State${normal}"
        echo_error "Unknown State"
    fi
}


function set_variables_log_location() {

    if [[ $shared == 1 ]]; then
        LogTimes=$HOME/.log
        LogLocation=$HOME/.log
        mkdir -p $LogLocation
        OutputLOG=$LogLocation/$pm_action.$AppNameLower.txt
    elif [[ -z $LogTimes ]]; then
        LogTimes=$LogRootPath/single
        LogLocation=$LogTimes/log
        OutputLOG=$LogLocation/$pm_action.$AppNameLower.txt
    elif [[ $LogTimes == none ]]; then
        LogTimes=/tmp/ttmmpp
        OutputLOG="/dev/null"
    else
        LogLocation=$LogTimes/log
        OutputLOG=$LogTimes/log/$pm_action.$AppNameLower.txt
    fi

    if [[ $pm_action != uninstall ]]; then
        [[ $Need_SourceCode == yes ]] && SCLocation=$LogTimes/source
        DebLocation=$LogRootPath/deb
    fi

    if [[ -z $shared ]]; then
        mkdir -p $LogRootPath $LogTimes $DebLocation $SCLocation $LOCKLocation $LogLocation $PortLocation
    fi
    { lines ; echo -e "$(date "+%Y.%m.%d %H:%M:%S") $AppName $pm_action" ; lines ; } >> $OutputLOG

    if [[ -n $SCLocation ]] && [[ $pm_action != uninstall ]]; then
        cd $SCLocation
    else
        cd /tmp
    fi
}


################################################################################################
################################################################################################ APT-GET
################################################################################################


# From QuickBox Lite
function APT_UPGRADE() {
	[[ $APT_UPGRADE_SINGLE == 1 ]] && echo_task "Checking and performing updates to system ... "
	DEBIAN_FRONTEND=noninteractive apt-get -y -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" update  >> $OutputLOG 2>&1
	DEBIAN_FRONTEND=noninteractive apt-get -y -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" upgrade >> $OutputLOG 2>&1
	## auto solve lock
	if [ "$?" -eq 2 ]; then
		echo_error "dpkg database is locked"
        echo_task "Try to fix dpkg lock ... "
		rm -f /var/lib/dpkg/updates/0*
		locks=$(find /var/lib/dpkg/lock* && find /var/cache/apt/archives/lock*)
		if [[ ${locks} == $(find /var/lib/dpkg/lock* && find /var/cache/apt/archives/lock*) ]]; then
			for l in ${locks}; do
				rm -rf ${l}
			done
			_excute "dpkg --configure -a"
			DEBIAN_FRONTEND=noninteractive apt-get -y -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" update  >> $OutputLOG 2>&1
			DEBIAN_FRONTEND=noninteractive apt-get -y -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" upgrade >> $OutputLOG 2>&1
		fi
		if ! (apt-get check >/dev/null); then
			apt-get install -f >> $OutputLOG 2>&1
			if ! (apt-get check >/dev/null); then
				# whiptail --title "$ERROR_TITLE_INSTALL" --msgbox "$ERROR_TEXT_INSTALL_1" --ok-button "$BUTTON_OK" 8 72
                echo_error "It seems there is something error when using apt-get, exiting ..."
				exit 1
			fi
		fi
        status_done
    else
        [[ $APT_UPGRADE_SINGLE == 1 ]] && status_done
	fi
}


function apt_install_check() {
    unset apt_install_list skip_list                                                                                # do not use local here
    packages=("$@")                                                                                                 # arg=("$@") packages=("${arg[@]:1}")
    [[ -z "$packages" ]] && echo "ERROR: No packages" | tee -a $OutputLOG && exit 1
    for package_name in "${packages[@]}" ; do
        if [ $(apt-cache show -q=0 $package_name 2>&1 | grep -c "No packages found") -eq 0 ]; then
            if [ $(dpkg-query -W -f='${Status}' $package_name 2>/dev/null | grep -c "ok installed") -eq 0 ]; then   # Not installed yet
                apt_install_list="$apt_install_list $package_name"
            fi
        else
            skip_list="$skip_list $package_name"
          # echo "$package_name not found, skipping" 2>&1 | tee -a "$OutputLOG"
        fi
    done
    if [[ -n "$skip_list" ]]; then
        echo "$skip_list not found, skipping" 2>&1 | tee -a "$OutputLOG"
    fi
}


# apt_install_check aaa bbb ; apt_install_separate ; apt_install_check aaa bbb ; apt_install_check_after
function apt_install_check_after() {
    if [[ -n "$apt_install_list" ]]; then
        echo -e "ERROR: It seems there are some package failed installation" 2>&1 | tee -a "$OutputLOG"
        exit 1
    fi
}


function apt_install_together() {
    # test -z "$apt_install_list" || apt-get -y install "$apt_install_list" >> "$OutputLOG" 2>&1
    if [[ -n "$apt_install_list" ]]; then
        # apt-get -y --allow-unauthenticated -f install "$apt_install_list" >> "$OutputLOG" 2>&1
        APT_UPGRADE
        DEBIAN_FRONTEND=noninteractive apt-get -y --allow-unauthenticated -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" install "$apt_install_list" >> "$OutputLOG" 2>&1
        if [ ! $? = 0 ]; then
            echo -e "ERROR: Failed to install packages" 2>&1 | tee -a "$OutputLOG"
            exit 1
        fi
    fi
}


function apt_install_separate() {
    if [[ -n "$apt_install_list" ]]; then
        APT_UPGRADE
        for package in $apt_install_list; do
            DEBIAN_FRONTEND=noninteractive apt-get -y --allow-unauthenticated -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" install $package >> "$OutputLOG" 2>&1
            # || { echo | tee -a $OutputLOG ; echo_error "Failed to install $package" ; exit 1 ; }
            if [ ! $? = 0 ]; then
                echo -e "ERROR: Failed to install $package" 2>&1 | tee -a "$OutputLOG"
                exit 1
            fi
        done
    fi
}


################################################################################################
################################################################################################
################################################################################################


function PortCheck() {
    ports=("$@")
    for port in "${ports[@]}" ; do
        if ss -ln | grep ':'$port'' | grep -q LISTEN ; then
            echo_warning "Port $port is already in use"
            port_used=1
        fi
    done
}
PortGenerator1() { portGen1=$(shuf -i 10001-32001 -n1) ; } ; portGenerator2() { portGen2=$(shuf -i 10001-32001 -n1) ; }
PortCheck1()     { while ss -ln | grep ':'$portGen1'' | grep -q LISTEN ; do PortGenerator1 ; done ; }
PortCheck2()     { while ss -ln | grep ':'$portGen2'' | grep -q LISTEN ; do PortGenerator2 ; done ; }

function check_remote_git_repo_branch() {
    [[ -z $(which git) ]] && { apt-get install -y git > /dev/null 2>&1 ; }
    [[ -z $(which git) ]] && { echo -e "${CW} No git_found ${normal}"       ; rm -f /tmp/.lt.git.tag ; exit 1 ; }
    local git_repo=$1
    local git_branch=$2
    [[ -z $git_repo   ]] && { echo -e "${CW} No git_repo input ${normal}"   ; rm -f /tmp/.lt.git.tag ; exit 1 ; }
    [[ -z $git_branch ]] && { echo -e "${CW} No git_branch input ${normal}" ; rm -f /tmp/.lt.git.tag ; exit 1 ; }
    rm -f /tmp/.lt.git.tag
    git ls-remote --tags  $git_repo | awk '{print $NF}' >> /tmp/.lt.git.tag
    git ls-remote --heads $git_repo | awk '{print $NF}' >> /tmp/.lt.git.tag
    grep $git_branch /tmp/.lt.git.tag -q || { echo -e "${CW} No such branch!${normal}" ; rm -f /tmp/.lt.git.tag ; exit 1 ; }
    rm -f /tmp/.lt.git.tag
}


################################################################################################
################################################################################################ Debug functions
################################################################################################


function debug_log_location() {
    if [[ $debug == 1 ]]; then
        echo
        for i in LogRootPath LogTimes DebLocation SCLocation LogLocation LOCKLocation OutputLOG \
                 compile_flag_threads git_repo git_branch AppName AppNameLower DebName Need_SourceCode pm_action \
                 iUser iPass iHome iPort wPort port mode version version_s status_lock arch CODENAME ; do
            echo -n "$i="
            eval echo "$"$i""
        done
        echo
        read -t 10
    fi
}


function cat_outputlog() {
    if [[ $show_log == 1 ]]; then
        lines
        echo -e "${bold}${OutputLOG}${normal}"
        # lines           # Since OutputLOG has lines itself
        cat ${OutputLOG}
        read -ep "$Tail log? " pasue
        lines2
        tail -f ${OutputLOG}
        exit
    fi
}


################################################################################################
################################################################################################ To be done
################################################################################################

function get_clients_port() {
[[ -z $iHome ]] && { echo -e "ERROR: Please specify user" ; exit 1 ; }

de_port=$(sed -rn 's/(.*)"daemon_port": (.*),/\2/p' $iHome/.config/deluge/core.conf)
de_port_w=$(sed -rn 's/(.*)"port": (.*),/\2/p' $iHome/.config/deluge/web.conf)
qb_port_w=$(sed -rn 's|WebUI\\Port=||p' $iHome/.config/qBittorrent/qBittorrent.conf)
qb_port_i=$(sed -rn 's|Connection\\PortRangeMin=||p' $iHome/.config/qBittorrent/qBittorrent.conf)
tr_port=$(grep rpc-port $iHome/.config/transmission-daemon/settings.json | grep -oE "[0-9]+")
fg_port=$(grep "web_server" -A7 $iHome/.config/flexget/config/ym; | grep -i port | grep -oE "[0-9]+")

de_installed_ver=$(deluged --version | grep deluge | awk '{print $2}' | grep -oE "[0-9].[0-9].[0-9]")
qb_installed_ver=$(qbittorrent-nox --version 2>&1 | awk '{print $2}' | grep -oE "[0-9.]+")
tr_installed_ver=$(transmission-daemon --help | head -n1 | awk '{print $2}')
rt_installed_ver=$(rtorrent -h | head -n1 | sed -ne 's/[^0-9]*\([0-9]*\.[0-9]*\.[0-9]*\)[^0-9]*/\1/p')
lt_installed_ver=$(pkg-config --exists --print-errors "libtorrent-rasterbar >= 3.0.0" 2>&1 | awk '{print $NF}' | grep -oE [0-9]+.[0-9]+.[0-9]+)

libssl_ver=$(dpkg-query -W -f='${Version}' libssl-dev 2>1 | grep -oE "[0-9].[0-9].[0-9]+" | head -1)
}


################################################################################################
################################################################################################ Notes
################################################################################################


function some_info() {
# https://github.com/Aniverse/rtinst/blob/master/scripts/rtsslcert#L50
openssl req -x509 -nodes -days 3650 -subj /CN=$serverip -config /etc/ssl/ruweb.cnf \
-newkey rsa:2048 -keyout /etc/ssl/private/ruweb.key -out /etc/ssl/ruweb.crt
# https://github.com/Aniverse/rtinst/blob/master/scripts/rtinst#L629
# calls the script rtsslcert to generate the ssl certificated for vsftpd and nginx
rtsslcert -d
# https://github.com/amefs/quickbox-lite/blob/master/setup.sh#L470
}
