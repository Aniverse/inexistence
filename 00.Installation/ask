#!/bin/bash
#
# https://github.com/Aniverse/inexistence
# Author: Aniverse
#
script_update=2020.04.19
script_version=r11017
################################################################################################ Usage Guide

usage_guide() {
    s=/etc/inexistence/00.Installation/ask;rm -f $s ; nano $s
    wget -q https://github.com/Aniverse/inexistence/raw/master/00.Installation/ask -O /etc/inexistence/00.Installation/ask

    if [[ -f /etc/inexistence/00.Installation/ask ]]; then
        source /etc/inexistence/00.Installation/ask
    else
        source <(wget -qO- https://github.com/Aniverse/inexistence/raw/master/00.Installation/ask)
    fi
}

################################################################################################

#[[ $script_lang == eng ]] &&
#[[ $script_lang == chs ]] &&

function set_language() {
    if [[ $script_lang == eng ]]; then
        lang_do_not_install="Do not install"
        language_select_another_version="Select another version"
        which_version_do_you_want="Which version do you want?"
        lang_yizhuang="You have already installed"
        lang_will_be_installed="will be installed"
        lang_note_that="Note that"
        lang_would_you_like_to_install="Would you like to install"
    elif [[ $script_lang == chs ]]; then
        lang_do_not_install="我不想安装"
        language_select_another_version="以上版本都不要，我要另选一个版本"
        which_version_do_you_want="你想要装什么版本？"
        lang_yizhuang="你已经安装了"
        lang_will_be_installed="将会被安装"
        lang_note_that="注意"
        lang_would_you_like_to_install="是否需要安装"
    fi
}

################################################################################################

### 输入自己想要的软件版本 ###
# ${blue}(use it at your own risk)${normal}
function _input_version() {
    if [[ $script_lang == eng ]]; then
        echo -e "\n${JG} ${bold}Use it at your own risk and make sure to input version correctly${normal}"
        read -ep "${bold}${yellow}Input the version you want: ${cyan}" input_version_num; echo -n "${normal}"
    elif [[ $script_lang == chs ]]; then
        echo -e "\n${JG} ${bold}确保你输入的版本号能用，不然输错了脚本也不管的${normal}"
        read -ep "${bold}${yellow}输入你想要的版本号： ${cyan}" input_version_num; echo -n "${normal}"
    fi
}

function ask_username(){
    clear
    validate_username $iUser
    if [[ $username_valid == empty ]]; then
        echo -e "${bold}${yellow}The script needs a username${jiacu}"
        echo -e "This will be your primary user. It can be an existing user or a new user ${normal}"
        ask_input_username
    elif [[ $username_valid == false ]]; then
      # echo -e "${JG} The preset username doesn't pass username check, please set a new username"
        ask_input_username
    elif [[ $username_valid == true ]]; then
      # iUser=`  echo $iUser | tr 'A-Z' 'a-z'  `
        echo -e "${bold}Username sets to ${blue}$iUser${normal}\n"
    fi
}

function ask_input_username(){
    local answerusername ; local reinput_name
    confirm_name=false
    while [[ $confirm_name == false ]]; do
        while [[ $answerusername = "" ]] || [[ $reinput_name = true ]] || [[ $username_valid = false ]]; do
            reinput_name=false
            read -ep "${bold}Enter username: ${blue}" answerusername ; echo -n "${normal}"
            validate_username $answerusername
        done

        addname=$answerusername
        echo -n "${normal}${bold}Confirm that username is ${blue}${addname}${normal}, ${bold}${green}[Y]es${normal} or [${bold}${red}N${normal}]o? "
        read answer
        case $answer in [yY] | [yY][Ee][Ss] | "" ) confirm_name=true ;;
                        [nN] | [nN][Oo]          ) reinput_name=true ;;
                        *                        ) echo "${bold}Please enter ${bold}${green}[Y]es${normal} or [${bold}${red}N${normal}]o";;
        esac

        iUser=$addname
    done
    echo
}

# 一定程度上的密码复杂度检测：https://stackoverflow.com/questions/36524872/check-single-character-in-array-bash-for-password-generator
# 询问密码。目前的复杂度判断还不够 Flexget 的程度，但总比没有强……
function ask_password() {
    local password1 ; local password2 ; #local exitvalue=0
    exec 3>&1 >/dev/tty

    if [[ $iPass = "" ]]; then
        echo "${bold}${yellow}The script needs a password, it will be used for Unix and WebUI${jiacu} "
        echo "The password must consist of characters and numbers and at least 8 chars,"
        echo "or you can leave it blank to generate a random password"
        while [ -z $localpass ]; do
            read -ep "${jiacu}Enter the password: ${blue}" password1 ; echo -n "${normal}"
    
            if [ -z $password1 ]; then
                localpass=$(genpasswd) ; # exitvalue=1
                echo "${jiacu}Random password sets to ${blue}$localpass${normal}"
            elif [ ${#password1} -lt 8 ]; then # At least [8] chars long
                echo "${bold}${red}ERROR${normal} ${bold}Password must be at least ${red}[8]${jiacu} chars long${normal}" && continue
            elif ! echo "$password1" | grep -q '[0-9]'; then # At least [1] number
                echo "${bold}${red}ERROR${normal} ${bold}Password must have at least ${red}[1] number${normal}" && continue
            elif ! echo "$password1" | grep -q '[a-zA-Z]'; then # At least [1] letter
                echo "${bold}${red}ERROR${normal} ${bold}Password must have at least ${red}[1] letter${normal}" && continue
            else
                while [[ $password2 = "" ]]; do
                    read -ep "${jiacu}Enter the new password again: ${blue}" password2 ; echo -n "${normal}"
                done
                if [ $password1 != $password2 ]; then
                    echo "${bold}${red}WARNING${normal} ${bold}Passwords do not match${normal}" ; unset password2
                else
                    localpass=$password1
                fi
            fi
        done
        iPass=$localpass
        exec >&3- ; echo ; # return $exitvalue
    else
        echo -e "${bold}Password sets to ${blue}$iPass${normal}\n"
    fi
}

function ask_multi_threads() {
    while [[ -z $MAXCPUS ]]; do
        echo -e "${green}01)${normal} Use ${cyan}all${normal} available threads (Default)"
        echo -e "${green}02)${normal} Use ${cyan}half${normal} of available threads"
        echo -e "${green}03)${normal} Use ${cyan}one${normal} thread"
        echo -e "${green}04)${normal} Use ${cyan}two${normal} threads"
        read -ep "${bold}${yellow}How many threads do you want to use when compiling?${normal} (Default ${cyan}01${normal}): " version
        case $responce in
            01 | 1 | "") MAXCPUS=$(nproc) ;;
            02 | 2     ) MAXCPUS=$(echo "$(nproc) / 2"|bc) ;;
            03 | 3     ) MAXCPUS=1 ;;
            04 | 4     ) MAXCPUS=2 ;;
            *          ) MAXCPUS=$(nproc) ;;
        esac
    done
    echo -e "${bold}${baiqingse}[${MAXCPUS}]${normal} ${bold}thread(s) will be used when compiling${normal}\n"
}

function ask_swap() {
    [[ -d /proc/vz ]] && [[ $tram -le 1926 ]] && {
    echo -e "${JG} You're using OpenVZ VPS and your RAM is less than 2GB\nYour memory may got exhausted sometimes when running this script\n"
    USESWAP=OpenVZ ; }
    if [[ -z $USESWAP ]] && [[ $tram -le 1926 ]]; then
        echo -e  "${bold}${red}$lang_note_that${normal} ${bold}Your RAM is below ${red}1926MB${jiacu}, memory may got exhausted when compiling${normal}"
        read -ep "${bold}${yellow}Would you like to use swap when compiling?${normal} [${cyan}Y${normal}]es or [N]o: " version
        case $responce in
            [yY] | [yY][Ee][Ss] | "") USESWAP=Yes ;;
            [nN] | [nN][Oo]         ) USESWAP=No  ;;
            *                       ) USESWAP=Yes ;;
        esac
        if [[ $USESWAP == Yes ]]; then
            echo -e "${bold}${baiqingse} 1GB Swap ${normal} will be used\n"
        else
            echo -e "${bold}Swap will not be used${normal}\n"
        fi
    fi
}

function ask_apt_sources() {
    while [[ -z $aptsources ]]; do
        read -ep "${bold}${yellow}Would you like to change sources list?${normal}  [${cyan}Y${normal}]es or [N]o: " responce
      # echo -ne "${bold}${yellow}Would you like to change sources list?${normal} [${cyan}Y${normal}]es or [N]o: " ; read -e responce
        case $responce in
            [yY] | [yY][Ee][Ss] | ""   ) aptsources=Yes ;;
            [nN] | [nN][Oo]            ) aptsources=No ;;
            *                          ) aptsources=Yes ;;
        esac
    done
    if [[ $aptsources == Yes ]]; then
        echo "${bold}${baiqingse}/etc/apt/sources.list${normal} ${bold}will be replaced${normal}"
    else
        echo "${baizise}/etc/apt/sources.list will ${baihongse}not${baizise} be replaced${normal}"
    fi
    echo
}

function ask_qbittorrent() {
    while [[ -z $qb_version ]]; do
        echo -e "${green}01)${normal} qBittorrent ${cyan}4.1.9 (static)${normal}"
        echo -e "${green}02)${normal} qBittorrent ${cyan}4.2.3 (static)${normal}"
        [[ $CODENAME != jessie ]] &&
        echo -e "${green}11)${normal} qBittorrent ${cyan}4.1.9 (deb)${normal}" &&
        echo -e "${green}12)${normal} qBittorrent ${cyan}4.2.3 (deb)${normal}"
        echo -e  "${blue}30)${normal} $language_select_another_version"
        echo -e   "${red}99)${normal} $lang_do_not_install qBittorrent"
    
        [[ -n $qb_installed_ver ]] &&
        echo -e "${bailanse}${bold} ATTENTION ${normal} ${blue}${bold}$lang_yizhuang ${underline}qBittorrent ${qb_installed_ver}${normal}"
        read -ep "${bold}${yellow}$which_version_do_you_want${normal} (Default ${cyan}02${normal}): " version
        case $version in
            01 | 1) qb_version=4.1.9 ; qb_mode=static ;;
            02 | 2) qb_version=4.2.3 ; qb_mode=static ;;
            11) qb_version=4.1.9 ;;
            12) qb_version=4.2.3 ;;
            30) _input_version && qb_version="${input_version_num}"  ;;
            99) qb_version=No ;;
            * | "") qb_version=4.2.3 ; qb_mode=static ;;
        esac
    done

    [[ -z $qb_mode ]] && [[ ${qb_deb_available[*]} =~ ${qb_version} ]] && qb_mode=deb
    qBittorrent_414_later=No
    [[ $(echo $qb_version | grep -oP "[0-9.]+" | awk -F '.' '{print $1}') == 3 ]] && qbt_ver_3=Yes
    [[ $(echo $qb_version | grep -oP "[0-9.]+") ]] && version_ge $qb_version 4.1.4 && qBittorrent_414_later=Yes
    if [[ $qb_version == No ]]; then
        echo "${baizise}qBittorrent will ${baihongse}not${baizise} be installed${normal}"
    else
        echo -e "${bold}${baiqingse}qBittorrent ${qb_version}${normal} ${bold}$lang_will_be_installed${normal}"
    fi
    echo
}

# wget -qO- "http://download.deluge-torrent.org/source/" | grep -Eo "1\.3\.[0-9]+" | sort -u | pr -6 -t ; echo
function ask_deluge() {
    while [[ -z $de_version ]]; do
        echo -e "${green}01)${normal} Deluge ${cyan}1.3.9${normal}"
        echo -e "${green}02)${normal} Deluge ${cyan}1.3.13${normal}"
        echo -e "${green}03)${normal} Deluge ${cyan}1.3.14${normal}"
        echo -e "${green}04)${normal} Deluge ${cyan}1.3.15${normal}"
        echo -e  "${blue}11)${normal} Deluge ${blue}2.0.3${normal} (Only for test)"
        echo -e  "${blue}30)${normal} $language_select_another_version"
        echo -e   "${red}99)${normal} $lang_do_not_install Deluge"

        [[ -n $de_installed_ver ]] &&
        echo -e "${bailanse}${bold} ATTENTION ${normal} ${blue}${bold}$lang_yizhuang ${underline}Deluge ${de_installed_ver}${reset_underline}${normal}"

        read -ep "${bold}${yellow}$which_version_do_you_want${normal} (Default ${cyan}04${normal}): " version
        case $version in
            01 | 1) de_version=1.3.9 ;;
            02 | 2) de_version=1.3.13 ;;
            03 | 3) de_version=1.3.14 ;;
            04 | 4) de_version=1.3.15 ;;
            11) de_version=2.0.3 ;;
            21) de_version='1.3.15_skip_hash_check' ;;
            30) _input_version && de_version="${input_version_num}" ;;
            31) _input_version && de_version="${input_version_num}" && de_test=yes &&  de_branch=yes ;;
            32) _input_version && de_version="${input_version_num}" && de_test=yes && de_version=yes ;;
            99) de_version=No ;;
            * | "") de_version=1.3.15 ;;
        esac
    done

    Deluge_2_later=No
    [[ $(echo $de_version | grep -oP "[0-9.]+") ]] && { version_ge $de_version 1.3.11 || Deluge_ssl_fix_patch=Yes ; }
    [[ $(echo $de_version | grep -oP "[0-9.]+") ]] && version_ge $de_version 2.0 && Deluge_2_later=Yes
    [[ $de_version == '1.3.15_skip_hash_check'  ]] && Deluge_1_3_15_skip_hash_check_patch=Yes

    if [[ $de_version == No ]]; then
        echo -e "${baizise}Deluge will ${baihongse}not${baizise} be installed${normal}\n"
    else
        echo -e "${bold}${baiqingse}Deluge ${de_version}${normal} ${bold}$lang_will_be_installed${normal}\n"
    fi
}

function ask_rtorrent() {
    if [[ $script_lang == eng ]]; then
        local lang_ipv6_1="with IPv6 support"
        local lang_ipv6_2="with UNOFFICAL IPv6 support"
        local lang_3="released on Sep 04, 2015"
        local lang_4="feature-bind branch on Jan 30, 2018"
        local branch=branch
    elif [[ $script_lang == chs ]]; then
        local lang_ipv6_1="支持 IPv6"
        local lang_ipv6_2="支持 IPv6 的修改版"
        local lang_3="2015 年的正式发布版本"
        local lang_4="2018 年 1 月 的 feature-bind 分支版本"
        local branch="分支"
    fi

    while [[ -z $rt_version ]]; do
            [[ $rtorrent_dev != 1 ]] && {
            echo -e "${green}01)${normal} rTorrent ${cyan}0.9.2${normal}"
            echo -e "${green}02)${normal} rTorrent ${cyan}0.9.3${normal}"
            echo -e "${green}03)${normal} rTorrent ${cyan}0.9.4${normal}"
            echo -e "${green}04)${normal} rTorrent ${cyan}0.9.6${normal} ($lang_3)"
            echo -e "${green}11)${normal} rTorrent ${cyan}0.9.2${normal} ($lang_ipv6_1)"
            echo -e "${green}12)${normal} rTorrent ${cyan}0.9.3${normal} ($lang_ipv6_1)"
            echo -e "${green}13)${normal} rTorrent ${cyan}0.9.4${normal} ($lang_ipv6_1)" ; }
            echo -e "${green}14)${normal} rTorrent ${cyan}0.9.6${normal} ($lang_4)"
            echo -e "${green}15)${normal} rTorrent ${cyan}0.9.7${normal} ($lang_ipv6_1)"
            echo -e "${green}16)${normal} rTorrent ${cyan}0.9.8${normal} ($lang_ipv6_1)"
            echo -e "${green}17)${normal} rTorrent ${cyan}feature-bind branch${normal} ($lang_ipv6_1)"
            echo -e   "${red}99)${normal} $lang_do_not_install rTorrent"
    
            [[ -n $rt_installed_ver ]] &&
            echo -e "${bailanse}${bold} ATTENTION ${normal} ${blue}${bold}$lang_yizhuang ${underline}rTorrent ${rt_installed_ver}${normal}"
            [[ $rtorrent_dev == 1 ]] &&
            echo "${bold}${red}$lang_note_that${normal} ${bold}${green}Debian 9/10${jiacu} and ${green}Ubuntu 18.04 ${jiacu}is only supported by ${green}rTorrent 0.9.6 and later${normal}"
    
            read -ep "${bold}${yellow}$which_version_do_you_want${normal} (Default ${cyan}14${normal}): " version
            case $version in
                01 | 1) rt_version=0.9.2 ;;
                02 | 2) rt_version=0.9.3 ;;
                03 | 3) rt_version=0.9.4 ;;
                04 | 4) rt_version=0.9.6 ;;
                11) rt_version='0.9.2 IPv6 supported' ;;
                12) rt_version='0.9.3 IPv6 supported' ;;
                13) rt_version='0.9.4 IPv6 supported' ;;
                14) rt_version='0.9.6 IPv6 supported' ;;
                15) rt_version=0.9.7 ;;
                16) rt_version=0.9.8 ;;
                17) rt_version=feature ;;
                99) rt_version=No ;;
                "" | *) rt_version='0.9.6 IPv6 supported' ;;
            esac
    done

    [[ $IPv6Opt == -i ]] && rt_version=`echo $rt_version IPv6 supported`
    [[ `echo $rt_version | grep IPv6` ]] && IPv6Opt=-i
    [[ $rt_version =~ (0.9.7|0.9.8|feature) ]] && IPv6Opt=-i
    rt_versionIns=`echo $rt_version | grep -Eo [0-9].[0-9].[0-9]`
    [[ $rt_version == feature ]] && rt_versionIns=feature

    if [[ $rt_version == No ]]; then
        [[ $script_lang == eng ]] && echo "${baizise}rTorrent will ${baihongse}not${baizise} be installed${normal}"
        [[ $script_lang == chs ]] && echo "${baihongse}跳过${baizise} rTorrent 的安装${normal}"
        InsFlood='No rTorrent'
    else
        if [[ `echo $rt_version | grep IPv6 | grep -Eo 0.9.[234]` ]]; then
            echo "${bold}${baiqingse}rTorrent $rt_versionIns ($lang_ipv6_2)${normal} ${bold}$lang_will_be_installed${normal}"
        elif [[ $rt_version == '0.9.6 IPv6 supported' ]]; then
            echo "${bold}${baiqingse}rTorrent 0.9.6 (feature-bind $branch)${normal} ${bold}$lang_will_be_installed${normal}"
        else
            echo "${bold}${baiqingse}rTorrent ${rt_version}${normal} ${bold}$lang_will_be_installed${normal}"
        fi
    fi

    echo
}

function ask_flood() {
    while [[ -z $InsFlood ]]; do
        read -ep "${bold}${yellow}$lang_would_you_like_to_install flood? ${normal} [Y]es or [${cyan}N${normal}]o: " responce
        case $responce in
            [yY] | [yY][Ee][Ss]  ) InsFlood=Yes ;;
            [nN] | [nN][Oo] | "" ) InsFlood=No  ;;
            *) InsFlood=No ;;
        esac
    done
    if [[ $InsFlood == Yes ]]; then
        echo -e "${bold}${baiqingse}Flood${normal} ${bold}$lang_will_be_installed${normal}\n"
    else
        echo -e "${baizise}Flood will ${baihongse}not${baizise} be installed${normal}\n"
    fi
}

function ask_transmission() {
    while [[ -z $tr_version ]]; do

        [[ ! $CODENAME =~ (bionic|buster) ]] &&
        echo -e "${green}01)${normal} Transmission ${cyan}2.84${normal}"
        echo -e "${green}02)${normal} Transmission ${cyan}2.92${normal}"
        echo -e "${green}03)${normal} Transmission ${cyan}2.94${normal}"
        echo -e "${green}21)${normal} Transmission ${cyan}2.94${normal} (deb)${normal}"
        echo -e  "${blue}30)${normal} $language_select_another_version"
        echo -e   "${red}99)${normal} $lang_do_not_install Transmission"

        [[ -n $tr_installed_ver ]] &&
        echo -e "${bailanse}${bold} ATTENTION ${normal} ${blue}${bold}$lang_yizhuang ${underline}Transmission ${tr_installed_ver}${normal}"

        read -ep "${bold}${yellow}$which_version_do_you_want${normal} (Default ${cyan}21${normal}): " version

        case $version in
                01 | 1) tr_version=2.84 ;;
                02 | 2) tr_version=2.92 ;;
                03 | 3) tr_version=2.94 ;;
                21) tr_version=2.94 && TRdefault=deb ;;
                30) _input_version && tr_version="${input_version_num}" ;;
                99) tr_version=No ;;
                "" | *) tr_version=2.94 && TRdefault=deb ;;
        esac
    
    done

    if [[ $tr_version == No ]]; then
        echo -e "${baizise}Transmission will ${baihongse}not${baizise} be installed${normal}\n"
    else
        echo -e "${bold}${baiqingse}Transmission ${tr_version}${normal} ${bold}$lang_will_be_installed${normal}\n"
    fi
}

################################################################################################
################################################################################################
################################################################################################

function ask_flexget() {
    while [[ -z $InsFlex ]]; do
        [[ $fg_installed == Yes ]] && echo -e "${bailanse}${bold} ATTENTION ${normal} ${blue}${bold}$lang_yizhuang FlexGet${normal}"
        read -ep "${bold}${yellow}$lang_would_you_like_to_install FlexGet?${normal} [Y]es or [${cyan}N${normal}]o: " responce
        case $responce in
            [yY] | [yY][Ee][Ss]  ) InsFlex=Yes ;;
            [nN] | [nN][Oo] | "" ) InsFlex=No ;;
            *) InsFlex=No ;;
        esac
    done
    if [ $InsFlex == Yes ]; then
        echo -e "${bold}${baiqingse}Flexget${normal} ${bold}$lang_will_be_installed${normal}\n"
    else
        echo -e "${baizise}Flexget will ${baihongse}not${baizise} be installed${normal}\n"
    fi
}

function ask_rclone() {
    while [[ -z $InsRclone ]]; do
        [[ $rclone_installed == Yes ]] && echo -e "${bailanse}${bold} ATTENTION ${normal} ${blue}${bold}$lang_yizhuang rclone${normal}"
        read -ep "${bold}${yellow}$lang_would_you_like_to_install rclone?${normal} [Y]es or [${cyan}N${normal}]o: " responce
        case $responce in
            [yY] | [yY][Ee][Ss]  ) InsRclone=Yes ;;
            [nN] | [nN][Oo] | "" ) InsRclone=No  ;;
            *) InsRclone=No ;;
        esac
    done
    if [[ $InsRclone == Yes ]]; then
        echo -e "${bold}${baiqingse}rclone${normal} ${bold}$lang_will_be_installed${normal}\n"
    else
        echo -e "${baizise}rclone will ${baihongse}not${baizise} be installed${normal}\n"
    fi
}

function ask_rdp() {
    while [[ -z $InsRDP ]]; do
        echo -e "${green}01)${normal} noVNC with xfce4"
        echo -e "${green}02)${normal} X2Go with xfce4"
        echo -e   "${red}99)${normal} $lang_do_not_install remote desktop"
        read -ep "${bold}${yellow}$lang_would_you_like_to_install remote desktop?${normal} (Default ${cyan}99${normal}): " responce
        case $responce in
            01 | 1) InsRDP=VNC  ;;
            02 | 2) InsRDP=X2Go ;;
            99    ) InsRDP=No   ;;
            "" | *) InsRDP=No   ;;
        esac
    done
    if [[ $InsRDP == VNC ]]; then
        echo -e "${bold}${baiqingse}VNC${jiacu} and ${baiqingse}xfce4${jiacu} $lang_will_be_installed${normal}\n"
    elif [[ $InsRDP == X2Go ]]; then
        echo -e "${bold}${baiqingse}X2Go${normal} and ${bold}${baiqingse}xfce4${jiacu} $lang_will_be_installed${normal}\n"
    else
        echo -e "${baizise}VNC or X2Go will ${baihongse}not${baizise} be installed${normal}\n"
    fi
}

function ask_wine() {
    while [[ -z $InsWine ]]; do
        read -ep "${bold}${yellow}$lang_would_you_like_to_install wine?${normal} [Y]es or [${cyan}N${normal}]o: " responce
        case $responce in
            [yY] | [yY][Ee][Ss]  ) InsWine=Yes ;;
            [nN] | [nN][Oo] | "" ) InsWine=No  ;;
            *) InsWine=No ;;
        esac
    done
    if [[ $InsWine == Yes ]]; then
        echo -e "${bold}${baiqingse}Wine${jiacu} $lang_will_be_installed${normal}\n"
    else
        echo -e "${baizise}Wine will ${baihongse}not${baizise} be installed${normal}\n"
    fi
}

function ask_mono() {
    while [[ -z $InsMono ]]; do
        read -ep "${bold}${yellow}$lang_would_you_like_to_install mono?${normal} [Y]es or [${cyan}N${normal}]o: " responce
        case $responce in
            [yY] | [yY][Ee][Ss]  ) InsMono=Yes ;;
            [nN] | [nN][Oo] | "" ) InsMono=No  ;;
            *) InsMono=No ;;
        esac
    done
    if [[ $InsMono == Yes ]]; then
        echo -e "${bold}${baiqingse}Mono${jiacu} $lang_will_be_installed${normal}\n"
    else
        echo -e "${baizise}Mono will ${baihongse}not${baizise} be installed${normal}\n"
    fi
}

function ask_tools() {
    while [[ -z $InsTools  ]]; do
        echo -e "MKVToolnix, mktorrent, eac3to, mediainfo, ffmpeg ..."
        echo -ne "${bold}${yellow}$lang_would_you_like_to_install the above additional softwares?${normal} [Y]es or [${cyan}N${normal}]o: " ; read -e responce
        case $responce in
            [yY] | [yY][Ee][Ss]  ) InsTools=Yes ;;
            [nN] | [nN][Oo] | "" ) InsTools=No  ;;
           *) InsTools=No ;;
        esac
    done
    if [[ $InsTools == Yes ]]; then
        echo -e "${bold}${baiqingse}Latest version of these softwares${jiacu} $lang_will_be_installed${normal}\n"
    else
        echo -e "${baizise}These softwares will ${baihongse}not${baizise} be installed${normal}\n"
    fi
}

function ask_tweaks() {
    while [[ $UseTweaks = "" ]]; do
        echo -ne "${bold}${yellow}Would you like to do some system tweaks? ${normal} [${cyan}Y${normal}]es or [N]o: " ; read -e responce
        case $responce in
            [yY] | [yY][Ee][Ss] | "" ) UseTweaks=Yes ;;
            [nN] | [nN][Oo]          ) UseTweaks=No ;;
            *                        ) UseTweaks=Yes ;;
        esac
    done
    if [[ $UseTweaks == Yes ]]; then
        echo -e "${bold}${baiqingse}System tweaks${normal} ${bold}will be configured${normal}\n"
    else
        echo -e "${baizise}System tweaks will ${baihongse}not${baizise} be configured${normal}\n"
    fi
}

function ask_reboot() {
    if [[ $script_lang == eng ]]; then
        local lang_1="Would you like to reboot the system now?"
        local lang_2="WTF, try reboot manually?"
        local lang_3="Reboot has been canceled..."
    elif [[ $script_lang == chs ]]; then
        local lang_1="你现在想要重启系统么？"
        local lang_2="emmmm，重启失败，你手动重启试试？"
        local lang_3="已取消重启……"
    fi
    echo -ne "${bold}${yellow}$lang_1 ${normal} [y/${cyan}N${normal}]: "
    if [[ $ForceYes == 1 ]];then reboot || echo "$lang_2" ; else read -e is_reboot ; fi
    if [[ $is_reboot == "y" || $is_reboot == "Y" ]]; then reboot
    else echo -e "${bold}$lang_3${normal}\n" ; fi
}



################################################################################################
################################################################################################ NEW FUNCTIONS after creating this script
################################################################################################

function ask_filebrowser() {
    while [[ -z $InsFB ]]; do
        read -ep "${bold}${yellow}$lang_would_you_like_to_install FileBrowser? ${normal} [${cyan}Y${normal}]es or [N]o: " responce
        case $responce in
            [yY] | [yY][Ee][Ss] | "" ) InsFB=Yes ;;
            [nN] | [nN][Oo]          ) InsFB=No  ;;
                                    *) InsFB=Yes ;;
        esac
    done
    if [[ $InsFB == Yes ]]; then
        echo -e "${bold}${baiqingse}FileBrowser${normal} ${bold}$lang_will_be_installed${normal}\n"
    else
        echo -e "${baizise}FileBrowser will ${baihongse}not${baizise} be installed${normal}\n"
    fi
}

################################################################################################
################################################################################################ WILL BE DEPRECATED SOON
################################################################################################

# 检查是否已经启用BBR、BBR 魔改版
function check_bbr_status() {
    tcp_control=$(cat /proc/sys/net/ipv4/tcp_congestion_control)
    [[ $tcp_control =~ (bbr|bbr_powered|bbrplus|nanqinlang|tsunami) ]] && bbrinuse=Yes || bbrinuse=No
}

# 检查理论上内核是否支持原版 BBR
function check_kernel_version() {
    kernel_vvv=$(uname -r | cut -d- -f1)
    [[ -n $kernel_vvv ]] && version_ge $kernel_vvv 4.9 && bbrkernel=Yes || bbrkernel=No
    # ls /lib/modules/\$(uname -r)/kernel/net/ipv4 | grep tcp_bbr.ko -q
}

# 询问是否安装BBR
function ask_bbr() {
    check_bbr_status
    if [[ $bbrinuse == Yes ]]; then
        echo -e "${bold}${yellow}TCP BBR has been installed. Skip ...${normal}"
        InsBBR=Already\ Installed
    elif [[ -d /proc/vz ]]; then
        echo -e "${yellow}${bold}Since your seedbox is based on ${red}OpenVZ${normal}${yellow}${bold}, skip BBR installation${normal}\n"
        InsBBR=Not\ supported\ on\ OpenVZ
    else
        check_kernel_version
        while [[ -z $InsBBR ]]; do
            if [[ $bbrkernel == Yes ]]; then
                echo -e "${bold}Your kernel is newer than ${green}4.9${normal}${bold}, but BBR is not enabled${normal}"
                read -ep "${bold}${yellow}Would you like to use BBR? ${normal} [${cyan}Y${normal}]es or [N]o: " responce
                case $responce in
                    [yY] | [yY][Ee][Ss] | "" ) InsBBR=To\ be\ enabled ;;
                    [nN] | [nN][Oo]          ) InsBBR=No ;;
                    *                        ) InsBBR=To\ be\ enabled ;;
                esac
            else
                echo -e "A new kernel (4.11.12) $lang_will_be_installed if BBR is to be installed"
                echo -e "${red}WARNING${normal} ${bold}Installing new kernel may cause reboot failure in some cases${normal}"
                echo -ne "${bold}${yellow}$lang_would_you_like_to_install BBR? ${normal} [Y]es or [${cyan}N${normal}]o: " ; read -e responce
                case $responce in
                    [yY] | [yY][Ee][Ss]  ) InsBBR=Yes ;;
                    [nN] | [nN][Oo] | "" ) InsBBR=No ;;
                    *                    ) InsBBR=No ;;
                esac
            fi
        done

       [[ $InsBBR == Yes ]] && [[ $bbrkernel == Yes ]] && InsBBR=To\ be\ enabled
        if [[ $InsBBR == Yes ]]; then
            echo -e "${bold}${baiqingse}TCP BBR${normal} ${bold}$lang_will_be_installed${normal}\n"
        elif [[ $InsBBR == To\ be\ enabled ]]; then
            echo -e "${bold}${baiqingse}TCP BBR${normal} ${bold}will be enabled${normal}\n"
        else
            echo -e "${baizise}TCP BBR will ${baihongse}not${baizise} be installed${normal}\n"
        fi
    fi
}


################################################################################################
################################################################################################ Install actions
################################################################################################



function do_installation() {
    [[ $InsBBR == Yes || $InsBBR == To\ be\ enabled ]] && { echo -ne "Configuring BBR ... \n\n\n" ; install_bbr 2>&1 | tee $LogLocation/02.bbr.log ; }

    if [[ -n $lt_version ]] && [[ $lt_version != system ]]; then
        if   [[ $lt_version == RC_1_0 ]]; then
            bash $local_packages/package/libtorrent-rasterbar --logbase $LogTimes -m deb
        elif [[ $lt_version == RC_1_1 ]]; then
            bash $local_packages/package/libtorrent-rasterbar --logbase $LogTimes -m deb3
        elif [[ $lt_version == RC_1_2 ]]; then
            bash $local_packages/package/libtorrent-rasterbar --logbase $LogTimes -b RC_1_2
        else
            bash $local_packages/package/libtorrent-rasterbar --logbase $LogTimes -v $lt_version
        fi
    fi

    if [[ $qb_version != No ]]; then
        if [[ $qb_mode == static ]]; then
            bash $local_packages/package/qbittorrent/install -v $qb_version -m static --logbase $LogTimes
        else
            bash $local_packages/package/qbittorrent/install -v $qb_version           --logbase $LogTimes
        fi
        if [[ -z $just_upgrade ]]; then
            bash $local_packages/package/qbittorrent/configure -u $iUser -p $iPass -w 2017 -i 9002 --logbase $LogTimes
        fi
    fi

    if [[ $de_version != No ]]; then
        echo -ne "Installing Deluge ... "
        write_current_logfile $LogLocation/03.de1.log
        { install_deluge > $LogLocation/03.de1.log 2>&1 ; } & spinner $!
        OutputLOG=$LogLocation/03.de1.log   status_done
        if [[ -z $just_upgrade ]]; then
            write_current_logfile $LogLocation/04.de2.log
            echo -ne "Configuring Deluge ... "
            { config_deluge  > $LogLocation/04.de2.log 2>&1 ; } & spinner $!
            OutputLOG=$LogLocation/04.de2.log    status_done
        fi
    fi

    if [[ $rt_version != No ]]; then
        echo -e "Installing rTorrent ... "
        install_rtorrent 2>&1 | tee $LogLocation/07.rt.log
    fi

    if [[ $InsFlood == Yes ]]; then
        write_current_logfile $LogLocation/07.flood.log
        echo -ne "Installing Flood ... "
        { install_flood > $LogLocation/07.flood.log 2>&1 ; } & spinner $!
        OutputLOG=$LogLocation/07.flood.log    status_done
    fi

    if [[ $tr_version != No ]]; then
        write_current_logfile $LogLocation/08.tr1.log
        echo -ne "Installing Transmission ... "
        { install_transmission > $LogLocation/08.tr1.log 2>&1 ; } & spinner $!
        OutputLOG=$LogLocation/08.tr1.log    status_done
        if [[ -z $just_upgrade ]]; then
            bash $local_packages/package/transmission/configure -u $iUser -p $iPass -w 9099 -i 52333 --logbase $LogTimes
        fi
    fi

    if [[ $InsFlex == Yes ]]; then
        bash $local_packages/package/flexget/install   --logbase $LogTimes
        bash $local_packages/package/flexget/configure --logbase $LogTimes -u $iUser -p $iPass -w 6566
    fi
    if [[ $InsRclone == Yes ]]; then
        bash $local_packages/package/rclone/install --logbase $LogTimes
        echo -ne "Installing gclone ... "
        bash <(wget -qO- https://git.io/gclone.sh) > /dev/null 2>&1  # 懒得做检查了，一般不太可能失败。其实也可以放到 rclone 脚本里，先不改了吧
        echo -e "${green}${bold}DONE${normal}"
    fi
    if [[ $InsWine == Yes ]]; then
        bash $local_packages/package/wine/install --logbase $LogTimes
    fi
    if [[ $InsMono == Yes ]]; then
        bash $local_packages/package/mono/install --logbase $LogTimes
    fi
    if [[ $InsVNC == Yes ]]; then
        bash /etc/inexistence/00.Installation/package/novnc/install   --logbase $LogTimes
        bash /etc/inexistence/00.Installation/package/novnc/configure --logbase $LogTimes -u $iUser -p $iPass
    fi
    if [[ $InsFB == Yes ]]; then
        bash /etc/inexistence/00.Installation/package/filebrowser     --logbase $LogTimes -w 7575
    fi
    if [[ $InsX2Go == Yes ]]; then
        write_current_logfile $LogLocation/12.x2go.log
        echo -ne "Installing X2Go ... "
        { install_x2go > $LogLocation/12.x2go.log 2>&1 ; } & spinner $!
        OutputLOG=$LogLocation/12.x2go.log    status_done
    fi
    if [[ $InsTools  == Yes ]]; then
        write_current_logfile $LogLocation/13.tool.log
        echo -ne "Installing Uploading Toolbox ... "
        { install_tools > $LogLocation/13.tool.log 2>&1 ; } & spinner $!
        OutputLOG=$LogLocation/13.tool.log    status_done
    fi
    if [[ $UseTweaks == Yes ]]; then
        if [[ $quick != 1 ]]; then
            # Upgrade vnstat, compile from source. And Install vnstat-dashboard
            bash $local_packages/package/vnstat/install --logbase $LogTimes
            if wget --no-check-certificate "https://127.0.0.1/vnstat" -qO- 2>&1 | grep Traffic -q ; then
                vnstat_webui=1
            fi
        fi
        write_current_logfile $LogLocation/98.tweaks
        echo -ne  "Configuring system settings ..."
        OutputLOG=$LogLocation/98.tweaks    system_tweaks  & spinner $!
        OutputLOG=$LogLocation/98.tweaks    status_done
    fi
}











################################################################################################
################################################################################################ DEPRECATED
################################################################################################

function version_check_latest_and_repo() {
    # 2020.04.07 这个检查比较慢，以后干脆写死，提高速度
    # 有可能出现刚开的机器没有 apt update，直接 apt-cache policy 提示找不到包的情况
    QB_repo_ver=$(apt-cache policy qbittorrent-nox | grep -B1 http | grep -Eo "[234]\.[0-9.]+\.[0-9.]+" | head -1)
    [[ -z $QB_repo_ver ]] && { [[ $CODENAME == bionic ]] && QB_repo_ver=4.0.3 ; [[ $CODENAME == xenial ]] && QB_repo_ver=3.3.1 ; [[ $CODENAME == jessie ]] && QB_repo_ver=3.1.10 ; [[ $CODENAME == stretch ]] && QB_repo_ver=3.3.7 ; }
    
    QB_latest_ver=$(wget -qO- https://github.com/qbittorrent/qBittorrent/releases | grep releases/tag | grep -Eo "[45]\.[0-9.]+" | head -1)
    [[ -z $QB_latest_ver ]] && QB_latest_ver=4.2.3
    
    DE_repo_ver=$(apt-cache policy deluged | grep -B1 http | grep -Eo "[12]\.[0-9.]+\.[0-9.]+" | head -1)
    [[ -z $DE_repo_ver ]] && { [[ $CODENAME == bionic ]] && DE_repo_ver=1.3.15 ; [[ $CODENAME == xenial ]] && DE_repo_ver=1.3.12 ; [[ $CODENAME == jessie ]] && DE_repo_ver=1.3.10 ; [[ $CODENAME == stretch ]] && DE_repo_ver=1.3.13 ; }
    
    DE_latest_ver=$(wget -qO- https://dev.deluge-torrent.org/wiki/ReleaseNotes | grep wiki/ReleaseNotes | grep -Eo "[12]\.[0-9.]+" | sed 's/">/ /' | awk '{print $1}' | head -1)
    [[ -z $DE_latest_ver ]] && DE_latest_ver=2.0.3
    # DE_github_latest_ver=` wget -qO- https://github.com/deluge-torrent/deluge/releases | grep releases/tag | grep -Eo "[12]\.[0-9.]+.*" | sed 's/\">//' | head -n1 `
    
    TR_repo_ver=$(apt-cache policy transmission-daemon | grep -B1 http | grep -Eo "[23]\.[0-9.]+" | head -1)
    [[ -z $TR_repo_ver ]] && { [[ $CODENAME == bionic ]] && TR_repo_ver=2.92 ; [[ $CODENAME == xenial ]] && TR_repo_ver=2.84 ; [[ $CODENAME == jessie ]] && TR_repo_ver=2.84 ; [[ $CODENAME == stretch ]] && TR_repo_ver=2.92 ; }
    
    TR_latest_ver=$(wget -qO- https://github.com/transmission/transmission/releases | grep releases/tag | grep -Eo "[23]\.[0-9.]+" | head -1)
    [[ -z $TR_latest_ver ]] && TR_latest_ver=2.94
}
