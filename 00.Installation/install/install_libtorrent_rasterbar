#!/bin/bash
#
# https://github.com/Aniverse/inexistence
# Author: Aniverse
#
script_update=2019.05.12
script_version=r10027
################################################################################################

usage_guide() {
bash $local_packages/install/libtorrent_rasterbar -m deb2 --logbase $LogTimes
bash <(wget -qO- https://github.com/Aniverse/inexistence/raw/master/00.Installation/install/libtorrent_rasterbar) -m deb2
bash <(wget -qO- https://github.com/Aniverse/inexistence/raw/master/00.Installation/install/libtorrent_rasterbar) -b RC_1_2 ; }

################################################################################################ Get options

OPTS=$(getopt -n "$0" -o m:v:b: --long "debug,install-mode:,version:,branch:logbase:" -- "$@")

eval set -- "$OPTS"

while true; do
  case "$1" in
    -m | --install-mode ) mode="$2"     ; shift ; shift ;;
    -v | --version      ) version="$2"  ; shift ; shift ;;
    -b | --branch       ) branch="$2"   ; shift ; shift ;;
         --debug        ) debug=1       ; shift ;;
         --logbase      ) LogTimes="$2" ; shift ;;
     * ) break ;;
  esac
done

################################################################################################

[[ -z $LogTimes ]] && LogTimes=/log/inexistence/single
OutputLOG=$LogTimes/install/libtorrent_rasterbar.txt    # /dev/null
DebLocation=$LogTimes/deb
SCLocation=$LogTimes/source
LOCKLocation=$LogTimes/lock

################################################################################################ Colors

black=$(tput setaf 0)   ; red=$(tput setaf 1)          ; green=$(tput setaf 2)   ; yellow=$(tput setaf 3);  bold=$(tput bold)
blue=$(tput setaf 4)    ; magenta=$(tput setaf 5)      ; cyan=$(tput setaf 6)    ; white=$(tput setaf 7) ;  normal=$(tput sgr0)
on_black=$(tput setab 0); on_red=$(tput setab 1)       ; on_green=$(tput setab 2); on_yellow=$(tput setab 3)
on_blue=$(tput setab 4) ; on_magenta=$(tput setab 5)   ; on_cyan=$(tput setab 6) ; on_white=$(tput setab 7)
shanshuo=$(tput blink)  ; wuguangbiao=$(tput civis)    ; guangbiao=$(tput cnorm) ; jiacu=${normal}${bold}
underline=$(tput smul)  ; reset_underline=$(tput rmul) ; dim=$(tput dim)
standout=$(tput smso)   ; reset_standout=$(tput rmso)  ; title=${standout}
baihuangse=${white}${on_yellow}; bailanse=${white}${on_blue} ; bailvse=${white}${on_green}
baiqingse=${white}${on_cyan}   ; baihongse=${white}${on_red} ; baizise=${white}${on_magenta}
heibaise=${black}${on_white}   ; heihuangse=${on_yellow}${black}
CW="${bold}${baihongse} ERROR ${jiacu}";ZY="${baihongse}${bold} ATTENTION ${jiacu}";JG="${baihongse}${bold} WARNING ${jiacu}"

################################################################################################

CODENAME=$( cat /etc/os-release | grep VERSION= | tr '[A-Z]' '[a-z]' | sed 's/\"\|(\|)\|[0-9.,]\|version\|lts//g' | awk '{print $2}' )
grep buster /etc/os-release -q && CODENAME=buster

function version_ge(){ test "$(echo "$@" | tr " " "\n" | sort -rV | head -n 1)" == "$1" ; }

function check_status() {
local LockName=$1
[[   -f /tmp/$LockName.1.lock ]] && echo -e " ${green}${bold}DONE${normal}"
[[   -f /tmp/$LockName.2.lock ]] && echo -e " ${red}${bold}FAILED${normal}"
[[ ! -f /tmp/$LockName.1.lock ]] && [[ ! -f /tmp/$LockName.2.lock ]] && echo -e " ${red}${bold}Unknown State${normal}" ; }

spinner() {
    local pid=$1
    local delay=0.25
    local spinstr='|/-\'
    while [ "$(ps a | awk '{print $1}' | grep $pid)" ]; do
        local temp=${spinstr#?}
        printf " [${bold}${yellow}%c${normal}]  " "$spinstr"
        local spinstr=$temp${spinstr%"$temp"}
        sleep $delay
        printf "\b\b\b\b\b\b"
    done
    printf "    \b\b\b\b"
}

[[ -z $mode ]] && [[ ! -z $version ]] && mode=source
[[ -z $mode ]] && [[ ! -z $branch  ]] && mode=source
[[ -z $mode ]] && echo -e "\n${CW} Installation mode must be specified as apt, deb, deb2, deb3 or source${normal}\n" && cancel

cancel() { echo -e "${normal}" ; rm -f ~/.lt.git.tag ; exit ; }
trap cancel SIGINT



################################################################################################



[[ -z $MAXCPUS ]] && MAXCPUS=$(nproc)

# Transform version to branch
[[ $( echo $version | grep -Eo "[012]\.[0-9]+\.[0-9]+" ) ]] && branch=$( echo libtorrent-$version | sed "s/\./_/g" )

[[ $debug == 1 ]] && echo -e "version=$version, branch=$branch"

# Check if input branch exists
# [[ ! -z $branch ]] && [[ ! $( wget -qO- "https://github.com/arvidn/libtorrent" | grep data-name | cut -d '"' -f2 | grep -P "$branch\b" ) ]] && { echo -e "\n${CW} No such branch!\n" ; exit 1 ; }

[[ ! -z $branch ]] && {
rm -f ~/.lt.git.tag
git ls-remote --tags  $git_repo | awk '{print $NF}' >> ~/.lt.git.tag
git ls-remote --heads $git_repo | awk '{print $NF}' >> ~/.lt.git.tag
grep $branch ~/.lt.git.tag -q || { echo -e "\n${CW} No such branch!${normal}\n" ; rm -f ~/.lt.git.tag ; exit 1 ; }
rm -f ~/.lt.git.tag ; }

# Use RC_1_1 if not specified
[[ -z $branch ]] && branch=RC_1_1

# Use 6.6.6 when version cannot be determind
[ ! -z $branch ] && [ -z $version ] && version=$( wget -qO- https://github.com/arvidn/libtorrent/raw/$branch/include/libtorrent/version.hpp | grep LIBTORRENT_VERSION | tail -n1 | grep -oE "[0-9.]+\"" | sed "s/.0\"//" )
[ ! -z $branch ] && [ -z $version ] && version=6.6.6

# Random number for marking different installations
[[ $mode == source ]] && RN=$(shuf -i 1-999 -n1)

rm -f /tmp/lt.1.lock /tmp/lt.2.lock /tmp/ltd.1.lock /tmp/ltd.2.lock





################################################################################################





# Install build dependencies for libtorrent-rasterbar
function install_lt_dependencies() {

apt-get install -y                                                                  \
build-essential pkg-config autoconf automake libtool git                            \
libboost-dev libboost-system-dev libboost-chrono-dev libboost-random-dev libssl-dev \
geoip-database libgeoip-dev                                                         \
libboost-python-dev                                                                 \
zlib1g-dev >> $OutputLOG 2>&1 && touch /tmp/ltd.1.lock || touch /tmp/ltd.2.lock

[[ -f /tmp/ltd.1.lock ]] && touch $LOCKLocation/libtorrent-rasterbar.dependencies.lock ; }





# Install from source codes
function install_lt_source() {

git clone --depth=1 -b $branch https://github.com/arvidn/libtorrent libtorrent-$version-$RN >> $OutputLOG 2>&1
cd libtorrent-$version-$RN

# See here for details: https://github.com/qbittorrent/qBittorrent/issues/6383
# Patches from amefs (QuickBox Dev)
if version_ge $version 1.1 ; then
    wget https://github.com/QuickBox/QB/raw/master/setup/sources/libtorrent-rasterbar-RC_1_1.patch >> $OutputLOG 2>&1
    patch -p1 < libtorrent-rasterbar-RC_1_1.patch >> $OutputLOG 2>&1
elif version_ge $version 1.0 ; then
    wget https://github.com/QuickBox/QB/raw/master/setup/sources/libtorrent-rasterbar-RC_1_0.patch >> $OutputLOG 2>&1
    patch -p1 < libtorrent-rasterbar-RC_1_0.patch >> $OutputLOG 2>&1
else
    sed -i "s/+ target_specific(),/+ target_specific() + ['-std=c++11'],/" bindings/python/setup.py || NoPatch=1
fi

mkdir -p doc-pak && echo "an efficient feature complete C++ bittorrent implementation" > description-pak

# ltversion=$(grep -oE "AC_INIT\(\[libtorrent-rasterbar\],.*" configure.ac | grep -oE "[0-9.]+" | head -1)
./autotool.sh >> $OutputLOG 2>&1

if [[ -z $NoPatch ]]; then
    ./configure --enable-python-binding --with-libiconv \
                --disable-debug --enable-encryption --with-libgeoip=system CXXFLAGS=-std=c++11  >> $OutputLOG 2>&1 # For both Deluge and qBittorrent
else
    ./configure --enable-python-binding --with-libiconv \
                --disable-debug --enable-encryption --with-libgeoip=system                      >> $OutputLOG 2>&1
fi

make -j$MAXCPUS >> $OutputLOG 2>&1

# 如果之前 dpkg 安装过一次，包名不一样的话，这一次 checkinstall 就会失败，所以失败后保险起见，失败了的话再 make install 试一次
checkinstall -y --pkgname=libtorrent-rasterbar --pkggroup libtorrent --pkgversion $version >> $OutputLOG 2>&1 && 
touch /tmp/lt.1.lock || {
make install >> $OutputLOG 2>&1 && touch /tmp/lt.1.lock || touch /tmp/lt.2.lock ; }

cp -f libtorrent-rasterb*.deb $DebLocation
[[ -f /tmp/lt.1.lock ]] && touch $LOCKLocation/libtorrent-rasterbar.lock
[[ -f /tmp/lt.1.lock ]] && touch $LOCKLocation/libtorrent-rasterbar.source.$branch.lock ; }





# Install from pre-compiled deb package (libtorrent-rasterbar8, based on RC_1_0 #62c96797a06a024dc17a44931c19afe6f7bd7d6c with python-binding fix)
function install_lt8_deb() {

wget -O lt.$CODENAME.1.0.11.deb https://raw.githubusercontent.com/Aniverse/inexistence/files/debian.package/libtorrent-rasterbar-1.0.11.$CODENAME.amd64.deb >> $OutputLOG 2>&1
dpkg -i lt.$CODENAME.1.0.11.deb >> $OutputLOG 2>&1 && touch /tmp/lt.1.lock || touch /tmp/lt.2.lock

[[ -f /tmp/lt.1.lock ]] && touch $LOCKLocation/libtorrent-rasterbar.lock
[[ -f /tmp/lt.1.lock ]] && touch $LOCKLocation/libtorrent-rasterbar.deb.lock ; }





# Install from pre-compiled deb package
# libtorrent-rasterbar9, based on RC_1_1 6f1250c6535730897909240ea0f4f2a81937d21a
# with python-binding fix (from amefs) and #5a48292aefd6ebffd5be6b237081ba2d978a2caa fix (Announce only once to private trackers, by Airium)
function install_lt9_deb() {

wget -O lt.$CODENAME.1.1.13.deb https://raw.githubusercontent.com/Aniverse/inexistence/files/debian.package/libtorrent-rasterbar-1.1.13.$CODENAME.amd64.deb >> $OutputLOG 2>&1

dpkg -i lt.$CODENAME.1.1.12.deb >> $OutputLOG 2>&1 && touch /tmp/lt.1.lock || touch /tmp/lt.2.lock

[[ -f /tmp/lt.1.lock ]] && touch $LOCKLocation/libtorrent-rasterbar.lock
[[ -f /tmp/lt.1.lock ]] && touch $LOCKLocation/libtorrent-rasterbar.deb.lock ; }





mkdir -p $SCLocation $DebLocation $LOCKLocation $(dirname $OutputLOG)
cd       $SCLocation
echo -e "${bold}${green}\n\n\n$(date "+%Y.%m.%d.%H.%M.%S")   $RN\n\n\n${normal}" >> $OutputLOG

case $mode in
    deb     ) [[ ! -f $LOCKLocation/libtorrent-rasterbar.dependencies.lock ]] && {
              echo -ne "Installing libtorrent-rasterbar build dependencies ..." | tee -a $OutputLOG
              install_lt_dependencies & spinner $!
              check_status ltd ; }

              echo -ne "Installing libtorrent-rasterbar ${bold}${cyan}1.0.11${normal} from pre-compiled deb package ..." | tee -a $OutputLOG
              install_lt8_deb & spinner $!
              ;;

    deb2    ) [[ ! -f $LOCKLocation/libtorrent-rasterbar.dependencies.lock ]] && {
              echo -ne "Installing libtorrent-rasterbar build dependencies ..." | tee -a $OutputLOG
              install_lt_dependencies & spinner $!
              check_status ltd ; }

              echo -ne "Installing libtorrent-rasterbar ${bold}${cyan}1.1.12${normal} from pre-compiled deb package ..." | tee -a $OutputLOG
              install_lt9_deb & spinner $!
              ;;

    source  ) [[ ! -f $LOCKLocation/libtorrent-rasterbar.dependencies.lock ]] && {
              echo -ne "Installing libtorrent-rasterbar build dependencies ..." | tee -a $OutputLOG
              install_lt_dependencies & spinner $!
              check_status ltd ; }

              if [[ ` echo $branch | grep -Eo "[012]_[0-9]_[0-9]+" ` ]]; then
                  echo -ne "Installing libtorrent-rasterbar ${bold}${cyan}$version${normal} from source codes ..." | tee -a $OutputLOG
              else
                  echo -ne "Installing libtorrent-rasterbar ${bold}$branch branch (${cyan}$version${jiacu})${normal} from source codes ..." | tee -a $OutputLOG
              fi

              install_lt_source & spinner $!
              ;;
esac

cd ; ldconfig
check_status lt
