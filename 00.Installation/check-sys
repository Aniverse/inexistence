#!/bin/bash
#
# https://github.com/Aniverse/inexistence
# Author: Aniverse
#
script_update=2020.04.07
script_version=r11008
################################################################################################ Usage Guide

usage_guide() {
s=/etc/inexistence/00.Installation/check-sys;rm -f $s ; nano $s
wget -q https://github.com/Aniverse/inexistence/raw/master/00.Installation/check-sys -O /etc/inexistence/00.Installation/check-sys

if [[ -f /etc/inexistence/00.Installation/check-sys ]]; then
    source /etc/inexistence/00.Installation/check-sys
else
    source <(wget -qO- https://github.com/Aniverse/inexistence/raw/master/00.Installation/check-sys)
fi
}

################################################################################################ OS Check

get_opsy() {
    # Fedora, CentOS
    [ -f /etc/redhat-release ] && awk '{print ($1,$3~/^[0-9]/?$3:$4)}' /etc/redhat-release && return
    # Gentoo, Slackware, Arch Linux, Alpine Linux, Ubuntu, Debian, OpenSUSE
    [ -f /etc/os-release ] && awk -F'[= "]' '/PRETTY_NAME/{print $3,$4,$5}' /etc/os-release && return
    # Ubuntu
    [ -f /etc/lsb-release ] && awk -F'[="]+' '/DESCRIPTION/{print $2}' /etc/lsb-release && return
}

lbit=$(getconf LONG_BIT 2>1)
running_kernel=$(uname -r 2>1)
arch=$(uname -m 2>1)
[ -z $arch ] && arch=$(echo "x$(getconf LONG_BIT)")

DISTRO=$(awk -F'[= "]' '/PRETTY_NAME/{print $3}' /etc/os-release)
DISTROL=$(echo $DISTRO | tr 'A-Z' 'a-z')
[[ $DISTRO =~ (Ubuntu|Debian) ]] && CODENAME=$(cat /etc/os-release | grep VERSION= | tr '[A-Z]' '[a-z]' | sed 's/\"\|(\|)\|[0-9.,]\|version\|lts//g' | awk '{print $2}' | head -1)
[[ $DISTRO == Ubuntu ]] && osversion=$(grep Ubuntu /etc/issue | head -1 | grep -oE  "[0-9.]+")
[[ $DISTRO == Debian ]] && osversion=$(cat /etc/debian_version)
[[ ! $DISTRO =~ (Ubuntu|Debian) ]] && DISTRO=$(get_opsy)

check_pm() {
    if type dnf       >/dev/null 2>&1; then  # Fedora, CentOS 8
        pm=dnf
    elif type yum     >/dev/null 2>&1; then  # CentOS
        pm=yum
    elif type apt-get >/dev/null 2>&1; then  # Debian/Ubuntu
        pm=apt-get
    elif type pacman  >/dev/null 2>&1; then  # ArchLinux
        pm=pacman
    elif type zypper  >/dev/null 2>&1; then  # SUSE
        pm=zypper
    elif type emerge  >/dev/null 2>&1; then  # Gentoo
        pm=emerge
    elif type apk     >/dev/null 2>&1; then  # Alpine
        pm=apk
    fi
}

check_pm

if [[ $DISTRO =~ (Debian|Ubuntu) ]]; then
    displayOS="$DISTRO $osversion $CODENAME ($arch)"
else
    displayOS="$DISTRO ($arch)"
fi



################################################################################################
################################################################################################ System spec check
################################################################################################



cname=$( awk -F: '/model name/ {name=$2} END {print name}' /proc/cpuinfo | sed 's/^[ \t]*//;s/[ \t]*$//' )

# Check interface
[ -n "$(grep 'eth0:' /proc/net/dev)" ] && wangka1=eth0 || wangka1=`cat /proc/net/dev |awk -F: 'function trim(str){sub(/^[ \t]*/,"",str); sub(/[ \t]*$/,"",str); return str } NR>2 {print trim($1)}'  |grep -Ev '^lo|^sit|^stf|^gif|^dummy|^vmnet|^vir|^gre|^ipip|^ppp|^bond|^tun|^tap|^ip6gre|^ip6tnl|^teql|^venet|^he-ipv6|^docker' |awk 'NR==1 {print $0}'`
wangka2=$(ip link show | grep -i broadcast | grep -m1 UP  | cut -d: -f 2 | cut -d@ -f 1 | sed 's/ //g')
if [[ -n $wangka2 ]]; then
    if [[ $wangka1 == $wangka2 ]];then
        interface=$wangka1
    else
        interface=$wangka2
    fi
else
    interface=$wangka1
fi


calc_disk() {
    local total_size=0 ; local array=$@
    for size in ${array[@]} ; do
        [ "${size}" == "0" ] && size_t=0 || size_t=`echo ${size:0:${#size}-1}`
        [ "`echo ${size:(-1)}`" == "K" ] && size=0
        [ "`echo ${size:(-1)}`" == "M" ] && size=$( awk 'BEGIN{printf "%.1f", '$size_t' / 1024}' )
        [ "`echo ${size:(-1)}`" == "T" ] && size=$( awk 'BEGIN{printf "%.1f", '$size_t' * 1024}' )
        [ "`echo ${size:(-1)}`" == "G" ] && size=${size_t}
        total_size=$( awk 'BEGIN{printf "%.1f", '$total_size' + '$size'}' )
    done
    echo ${total_size}
}


hardware_check_1() {
    cputhreads=$( grep 'processor' /proc/cpuinfo | sort -u | wc -l )
    cpucores_single=$( grep 'core id' /proc/cpuinfo | sort -u | wc -l )
    cpunumbers=$( grep 'physical id' /proc/cpuinfo | sort -u | wc -l )
    cpucores=$( expr $cpucores_single \* $cpunumbers )
    [[ $cpunumbers == 2 ]] && CPUNum='Dual ' ; [[ $cpunumbers == 4 ]] && CPUNum='Quad ' ; [[ $cpunumbers == 8 ]] && CPUNum='Octa '

    disk_size1=($( LANG=C df -hPl | grep -wvE '\-|none|tmpfs|devtmpfs|by-uuid|chroot|Filesystem' | awk '{print $2}' ))
    disk_size2=($( LANG=C df -hPl | grep -wvE '\-|none|tmpfs|devtmpfs|by-uuid|chroot|Filesystem' | awk '{print $3}' ))
    disk_total_size=$( calc_disk ${disk_size1[@]} )
    disk_used_size=$( calc_disk ${disk_size2[@]} )
    freq=$( awk -F: '/cpu MHz/ {freq=$2} END {print freq}' /proc/cpuinfo | sed 's/^[ \t]*//;s/[ \t]*$//' )
    tram=$( free -m | awk '/Mem/ {print $2}' )
    uram=$( free -m | awk '/Mem/ {print $3}' )
}


################################################################################################
################################################################################################ Long
################################################################################################


detectOs() {
    local DISTRIB_ID=
    local DISTRIB_DESCRIPTION=
    if [ -f /etc/lsb-release ]; then
        . /etc/lsb-release
    fi

    # Add Alpine Linux detection
    if   cat /etc/os-release | grep -i Alpine ; then
        os=alpine
        os_long="$(awk -F'[= "]' '/PRETTY_NAME/{print $3,$4,$5}' /etc/os-release)"
    elif [ -f /etc/fedora-release ]; then
        os=fedora
        os_long="$(cat /etc/fedora-release)"
    # Must be before PCLinuxOS, Mandriva, and a whole bunch of other OS tests
    elif [ -f /etc/unity-release ]; then
        os=unity
        os_long="$(cat /etc/unity-release)"
    elif [ -f /etc/pclinuxos-release ]; then
        os=pclinuxos
        os_long="$(cat /etc/pclinuxos-release)"
    elif [ "$DISTRIB_ID" = "Ubuntu" ]; then
        os=debian
        os_long="$DISTRIB_DESCRIPTION"
    elif [ "$DISTRIB_ID" = "LinuxMint" ]; then
        os=debian
        os_long="$DISTRIB_DESCRIPTION"
    # Must be before Debian
    elif [ "$DISTRIB_ID" = "Peppermint" ]; then
        os=debian
        os_long="$DISTRIB_DESCRIPTION"
    elif [ "$DISTRIB_ID" = "MEPIS" ]; then
        os=debian
        os_long="$DISTRIB_DESCRIPTION"
    elif [ -f /etc/clearos-release ]; then
        os=fedora
        os_long="$(cat /etc/clearos-release)"
    elif [ -f /etc/pardus-release ]; then
        os=pardus
        os_long="$(cat /etc/pardus-release)"
    elif [ -f /etc/chakra-release ]; then
        os=arch
        os_long="Chakra $(cat /etc/chakra-release)"
    elif [ -f /etc/frugalware-release ]; then
        os=frugalware
        os_long="$(cat /etc/frugalware-release)"
    # Must test this before Gentoo
    elif [ -f /etc/sabayon-release ]; then
        os=sabayon
        os_long="$(cat /etc/sabayon-release)"
    elif [ -f /etc/arch-release ]; then
        os=arch
        os_long="Arch Linux"
    elif [ -f /etc/gentoo-release ]; then
        os=gentoo
        os_long="$(cat /etc/gentoo-release)"
    elif [ -f /etc/SuSE-release ]; then
        os=opensuse
        os_long="$(grep SUSE /etc/SuSE-release | head -n1)"
    elif [ -f /etc/debian_version ]; then
        os=debian
        local prefix=
        if ! uname -s | grep -q GNU; then
            prefix="GNU/"
        fi
        os_long="Debian $prefix$(uname -s) $(cat /etc/debian_version)"
    # Must test for mandriva before centos since it also has /etc/redhad-release
    elif [ -f /etc/mandriva-release ]; then
        os=mandriva
        os_long="$(cat /etc/mandriva-release)"
    elif [ -f /etc/redhat-release ]; then
        os=fedora
        os_long="$(cat /etc/redhat-release)"
    elif [ -f /etc/vector-version ]; then
        os=slaptget
        os_long="VectorLinux $(cat /etc/vector-version)"
    elif [ -f /etc/slackware-version ]; then
        os=slackware
        os_long="$(cat /etc/slackware-version)"
        #if isProgramInstalled slapt-get; then
        #    os=slaptget
        #else
        #    os=other
        #fi
    elif [ "$(uname -s)" = "FreeBSD" ]; then
        os=freebsd
        os_long=FreeBSD
    elif [ "$(uname -s)" = "DragonFly" ]; then
        os=dragonfly
        os_long="DragonFly BSD"
    elif [ "$(uname -s)" = "OpenBSD" ]; then
        os=openbsd
        os_long=OpenBSD
    elif [ "$(uname -s)" = "NetBSD" ]; then
        os=netbsd
        os_long=NetBSD
    else
        os=other
        os_long="$(uname -s)"
    fi

    os_long="${os_long:-$(uname -s)}"
}


detectOs


# Modified, Origin see here: https://github.com/Tarcaxoxide/i
# pm_action update-source ; pm_action install wget
function pm_action(){
    # args=$(echo "$*" |grep -v "$1")
    args="${*:2}"
######################################################
    if [ "$1" == "install" ];then
        if type "emerge" &> /dev/null; then 
            emerge "$args"
        elif type "pacman" &> /dev/null; then
            pacman -S --noconfirm "$args"
        elif type "apt-get" &> /dev/null; then
            apt-get install -y "$args"
        elif type "zypper" &> /dev/null; then
            zypper install -y "$args"
        elif type "dnf" &> /dev/null; then
            dnf install -y "$args"
        elif type "yum" &> /dev/null; then
            yum install -y "$args"
        elif type "apk" &> /dev/null; then
            apk add "$args"
        fi
    fi
######################################################
    if [ "$1" == "uninstall" ];then
        if type "emerge" &> /dev/null; then
            emerge --unmerge "$args"
        elif type "pacman" &> /dev/null; then
            pacman -Rsc "$args"
        elif type "apt-get" &> /dev/null; then
            apt-get remove "$args"
        elif type "zypper" &> /dev/null; then
            zypper remove "$args"
        elif type "dnf" &> /dev/null; then
            dnf remove "$args"
        elif type "yum" &> /dev/null; then
            yum remove "$args"
        elif type "apk" &> /dev/null; then
            apk del "$args"
        fi
    fi
######################################################
    if [ "$1" == "upgrade" ];then
        if type "emerge" &> /dev/null; then
            emerge --update --deep "$args"
        elif type "pacman" &> /dev/null; then
            pacman -Syu "$args"
        elif type "apt-get" &> /dev/null; then
            apt-get install --only-upgrade "$args"
        elif type "zypper" &> /dev/null; then
            zypper update "$args"
        elif type "dnf" &> /dev/null; then
            dnf update "$args"
        elif type "yum" &> /dev/null; then
            yum update "$args"
        elif type "apk" &> /dev/null; then
            apk add --upgrade "$args"
        fi
    fi

    if [ "$1" == "update" ];then
        if type "emerge" &> /dev/null; then
            emerge --sync
        elif type "pacman" &> /dev/null; then
            pacman -Syy
        elif type "apt-get" &> /dev/null; then
            apt-get update
        elif type "zypper" &> /dev/null; then
            zypper refresh
        elif type "dnf" &> /dev/null; then
            dnf check-update
            # dnf makecache
        elif type "yum" &> /dev/null; then
            yum check-update
            # yum makecache
        elif type "apk" &> /dev/null; then
            apk update
        fi
    fi

    if [ "$1" == "all-update" ];then
        if type "emerge" &> /dev/null; then
            emerge --update --deep @world
        elif type "pacman" &> /dev/null; then
            pacman -Syyu
        elif type "apt-get" &> /dev/null; then
            apt-get dist-upgrade
        elif type "zypper" &> /dev/null; then
            zypper update
        elif type "dnf" &> /dev/null; then
            dnf update
            dnf upgrade
        elif type "yum" &> /dev/null; then
            yum update
        elif type "apk" &> /dev/null; then
            apk upgrade
        fi
    fi

######################################################
    if [ "$1" == "list" ];then
        if type "emerge" &> /dev/null; then
            echo command undefined
        elif type "pacman" &> /dev/null; then
            pacman -Q | more
        elif type "apt-get" &> /dev/null; then
            echo command undefined
        elif type "zypper" &> /dev/null; then
            zypper packages
        elif type "dnf" &> /dev/null; then
            dnf list installed
        elif type "yum" &> /dev/null; then
            yum list
        elif type "apk" &> /dev/null; then
            apk list
        fi
    fi
######################################################
    if [ "$1" == "search" ];then
        if type "emerge" &> /dev/null; then
            emerge --search "$args"
        elif type "pacman" &> /dev/null; then
            pacman -Ss "$args"
        elif type "apt-get" &> /dev/null; then
            apt-cache search "$args"
        elif type "zypper" &> /dev/null; then
            zypper search "$args"
        elif type "dnf" &> /dev/null; then
            dnf search "$args"
        elif type "yum" &> /dev/null; then
            yum search "$args"
        elif type "apk" &> /dev/null; then
            apk search "$args"
        fi
    fi
######################################################
    if [ "$1" == "info" ];then
        if type "emerge" &> /dev/null; then
            emerge --info "$args"
        elif type "pacman" &> /dev/null; then
            pacman -Si "$args"
        elif type "apt-get" &> /dev/null; then
            apt-cache show "$args"
        elif type "zypper" &> /dev/null; then
            zypper info"$args"
        elif type "dnf" &> /dev/null; then
            dnf info "$args"
        elif type "yum" &> /dev/null; then
            yum info "$args"
        elif type "apk" &> /dev/null; then
            apk info -a "$args"
        fi
    fi
######################################################
    if [ "$1" == "cleanup" ];then
        if type "emerge" &> /dev/null; then
            emerge --ask --clean --deep
            emerge --ask --depclean
        elif type "pacman" &> /dev/null; then
            pacman -Sc
        elif type "apt-get" &> /dev/null; then
            apt-get autoclean
        elif type "zypper" &> /dev/null; then
            zypper clean --all
        elif type "dnf" &> /dev/null; then
            dnf clean all
        elif type "yum" &> /dev/null; then
            yum clean all
        elif type "apk" &> /dev/null; then
            apk cache clean
        fi
    fi
###################################################### To be fixed
    if [ "$1" == "show-source" ];then
        if type "emerge" &> /dev/null; then
            sleep 0
        elif type "pacman" &> /dev/null; then
            cat /etc/pacman.d/mirrorlist
        elif type "apt-get" &> /dev/null; then
            cat /etc/apt/sources.list
        elif type "zypper" &> /dev/null; then
            cat /etc/zypp/repos.d/OSS.repo
        elif type "dnf" &> /dev/null; then
            cat /etc/yum.repos.d/fedora.repo
            cat /etc/yum.repos.d/fedora-updates.repo
        elif type "yum" &> /dev/null; then
            cat /etc/yum.repos.d/CentOS-Base.repo
        elif type "apk" &> /dev/null; then
            cat /etc/apk/repositories
        fi
    fi
}

# Virt-what
check_virt() {
    local virtual
    local virtualx=$(dmesg 2>1)
    local arch=$(uname -p)
    local dmi=$(LANG=C dmidecode 2>&1)

    if  [ $(which dmidecode) ]; then
        sys_manu=$(dmidecode -s system-manufacturer) 2>/dev/null
        sys_product=$(dmidecode -s system-product-name) 2>/dev/null
        sys_ver=$(dmidecode -s system-version) 2>/dev/null
    else
        sys_manu=""
        sys_product=""
        sys_ver=""
    fi
    
    if grep docker /proc/1/cgroup -qa 2>/dev/null ; then
        virtual="Docker"
    elif grep lxc /proc/1/cgroup -qa 2>/dev/null; then
        virtual="Lxc"
    elif grep -qa container=lxc /proc/1/environ 2>/dev/null; then
        virtual="Lxc"
    elif [[ -f /proc/user_beancounters ]]; then
        virtual="OpenVZ"
    elif [[ "$virtualx" == *kvm-clock* ]] || [[ "$cname" == *KVM* ]]; then
        virtual="KVM"
    elif [[ "$virtualx" == *"VMware Virtual Platform"* ]]; then
        virtual="VMware"
    elif [[ "$virtualx" == *"Parallels Software International"* ]]; then
        virtual="Parallels"
    elif [[ "$virtualx" == *VirtualBox* ]]; then
        virtual="VirtualBox"
    elif grep -q 'UML' "/proc/cpuinfo"; then
        virtual="UML (User Mode Linux)"
    elif grep -q '^vendor_id.*PowerVM Lx86' "${root}/proc/cpuinfo"; then
        virtual="PowerVM Lx86"
    elif cat "/proc/self/status" | grep -q "VxID: [0-9]*" ; then
        if grep -q "VxID: 0$" "/proc/self/status"; then
            virtual="Linux VServer Host"
        else
            virtual="Linux VServer Guest"
        fi
    elif grep -q '^vendor_id.*IBM/S390' "/proc/cpuinfo" ; then
        if grep -q 'VM.*Control Program.*z/VM' "/proc/sysinfo"; then
            virtual="IBM SystemZ ZVM"
        elif grep -q '^LPAR' "${root}/proc/sysinfo"; then
            virtual="IBM SystemZ LPAR"
        else
            virtual="IBM SystemZ"
        fi
    elif echo "$dmi" | grep -q 'Manufacturer.*HITACHI' && echo "$dmi" | grep -q 'Product.* LPAR'; then
        virtual="Virtage"
    elif [[ -d /proc/xen ]]; then
        if grep -q "control_d" "/proc/xen/capabilities" 2>/dev/null; then
            virtual="Xen-Dom0"
        else
            virtual="Xen-DomU"
        fi
    elif [ -f "/sys/hypervisor/type" ] && grep -q "xen" "/sys/hypervisor/type"; then
        virtual="Xen"
    elif [[ "$sys_manu" == *"Microsoft Corporation"* ]]; then
        if [[ "$sys_product" == *"Virtual Machine"* ]]; then
            if [[ "$sys_ver" == *"7.0"* || "$sys_ver" == *"Hyper-V" ]]; then
                virtual="Hyper-V"
            else
                virtual="Microsoft Virtual Machine"
            fi
        fi
    else
        virtual="No Virtualization Detected"
    fi

    if [ "$arch" = "ia64" ]; then
        if [ -d "/sys/bus/xen" -a ! -d "/sys/bus/xen-backend" ]; then
           virtual="Xen-HVM"
        fi
    fi

    [[ "$virtual" != KVM ]] && grep -q QEMU /proc/cpuinfo && virt="QEMU"
}

check_virt


################################################################################################
################################################################################################ IP-Related
################################################################################################



function isValidIpAddress() { echo $1 | grep -qE '^[0-9][0-9]?[0-9]?\.[0-9][0-9]?[0-9]?\.[0-9][0-9]?[0-9]?\.[0-9][0-9]?[0-9]?$' ; }

function isInternalIpAddress() { echo $1 | grep -qE '(192\.168\.((\d{1,2})|(1\d{2})|(2[0-4]\d)|(25[0-5]))\.((\d{1,2})$|(1\d{2})$|(2[0-4]\d)$|(25[0-5])$))|(172\.((1[6-9])|(2\d)|(3[0-1]))\.((\d{1,2})|(1\d{2})|(2[0-4]\d)|(25[0-5]))\.((\d{1,2})$|(1\d{2})$|(2[0-4]\d)$|(25[0-5])$))|(10\.((\d{1,2})|(1\d{2})|(2[0-4]\d)|(25[0-5]))\.((\d{1,2})|(1\d{2})|(2[0-4]\d)|(25[0-5]))\.((\d{1,2})$|(1\d{2})$|(2[0-4]\d)$|(25[0-5])$))' ; }

# From nench.sh
function redact_ip() {
    case "$1" in
        *.*)
            printf '%s.xxx\n' "$(printf '%s\n' "$1" | cut -d . -f 1-3)"
            ;;
        *:*)
            printf '%s:xxxx\n' "$(printf '%s\n' "$1" | cut -d : -f 1-3)"
            ;;
    esac
}

ipv4_check() {
    echo -e "${bold}Checking your server's public IPv4 address ...${normal}"
    # serveripv4=$( ifconfig | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1' )
    # serveripv4=$( ifconfig -a|grep inet|grep -v 127.0.0.1|grep -v inet6|awk '{print $2}'|tr -d "addr:" )
    # serveripv4=$( ip route get 8.8.8.8 | awk '{print $3}' )
    # isInternalIpAddress "$serveripv4" || serveripv4=$( wget --no-check-certificate -t1 -T6 -qO- v4.ipv6-test.com/api/myip.php )
    serveripv4=$( ip route get 1 | sed -n 's/^.*src \([0-9.]*\) .*$/\1/p' )
    isInternalIpAddress "$serveripv4" || serveripv4=$( wget --no-check-certificate -t1 -T6 -qO- v4.ipv6-test.com/api/myip.php )
    isValidIpAddress    "$serveripv4" || serveripv4=$( wget --no-check-certificate -t1 -T6 -qO- checkip.dyndns.org | sed -e 's/.*Current IP Address: //' -e 's/<.*$//' )
    isValidIpAddress    "$serveripv4" || serveripv4=$( wget --no-check-certificate -t1 -T7 -qO- ipecho.net/plain )
    isValidIpAddress "$serveripv4" || { echo "${bold}${red}${shanshuo}ERROR ${jiacu}${underline}Failed to detect your public IPv4 address, use internal address instead${normal}" ; serveripv4=$( ip route get 8.8.8.8 | awk '{print $3}' ) ; }
    serveripv4_show=$(redact_ip "$serveripv4") ; [[ $full_ip == 1 ]] && serveripv4_show=$serveripv4
}

ipv6_check() {
    serveripv6=$( wget -t1 -T5 -qO- v6.ipv6-test.com/api/myip.php | grep -Eo "[0-9a-z:]+" | head -n1 )
    # serveripv6=$( wget --no-check-certificate -qO- -t1 -T8 ipv6.icanhazip.com )
    # serverlocalipv6=$( ip addr show dev $interface | sed -e's/^.*inet6 \([^ ]*\)\/.*$/\1/;t;d' | grep -v fe80 | head -n1 )
    serveripv6_show=$(redact_ip "$serveripv6") ; [[ $full_ip == 1 ]] && serveripv6_show=$serveripv6
}

ip_ipapi() {
     wget --no-check-certificate -t1 -T6 -qO- https://ipapi.co/json > $HOME/ipapi 2>&1
     ccoodde=$( cat $HOME/ipapi | grep \"country\"      | awk -F '"' '{print $4}' ) 2>/dev/null
     country=$( cat $HOME/ipapi | grep \"country_name\" | awk -F '"' '{print $4}' ) 2>/dev/null
     regionn=$( cat $HOME/ipapi | grep \"region\"       | awk -F '"' '{print $4}' ) 2>/dev/null
     cityyyy=$( cat $HOME/ipapi | grep \"city\"         | awk -F '"' '{print $4}' ) 2>/dev/null
     isppppp=$( cat $HOME/ipapi | grep \"org\"          | awk -F '"' '{print $4}' ) 2>/dev/null
     asnnnnn=$( cat $HOME/ipapi | grep \"asn\"          | awk -F '"' '{print $4}' ) 2>/dev/null
     [[ $cityyyy == Singapore ]] && unset cityyyy
     [[ -z $isppppp ]] && isp="No ISP detected"
     [[ -z $asnnnnn ]] && isp="No ASN detected"
     rm -f $HOME/ipapi 2>&1
}



################################################################################################
################################################################################################ deprecated
################################################################################################

check_release() {
    if [ -f /etc/redhat-release ]; then
        release="centos"
    elif cat /etc/issue | grep -Eqi "debian"; then
        release="debian"
    elif cat /etc/issue | grep -Eqi "ubuntu"; then
        release="ubuntu"
    elif cat /etc/issue | grep -Eqi "centos|red hat|redhat"; then
        release="centos"
    elif cat /proc/version | grep -Eqi "debian"; then
        release="debian"
    elif cat /proc/version | grep -Eqi "ubuntu"; then
        release="ubuntu"
    elif cat /proc/version | grep -Eqi "centos|red hat|redhat"; then
        release="centos"
    elif cat /etc/os-release | grep -Eqi "arch.linux" ; then
        release="archlinux"
    elif cat /etc/os-release | grep -Eqi "slackware" ; then
        release="slackware"
    fi
}

ip_ipip() {
    echo -e "${bold}正在检查服务器的其他 IP 信息 ... (可能要很久)${normal}"

    ipip_result=$HOME/ipip_result
    wget --no-check-certificate -qO- https://www.ipip.net/ip.html > $ipip_result 2>&1

    # ipip_Loc=$( cat $ipip_result | grep -A3 地理位置   | grep -v 地理位置 | grep -oE ">.*<" | sed "s/>//" | sed "s/<//" )
    # ipip_ISP=$( cat $ipip_result | grep -A3 -E "运营商|所有者" | grep -Ev "运营商|所有者" | grep -oE ">.*<" | sed "s/>//" | sed "s/<//" )

      ipip_IP=$( cat $ipip_result | grep -A3 IP     | grep -oE "[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+" | head -1 )
     ipip_ASN=$( cat $ipip_result | grep -C7 ASN    | grep -oE "AS[0-9]+" | head -1 )
    #ipip_CIDR=$( cat $ipip_result | grep -C7 ASN    | grep -oE "[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+/[0-9]+" | head -1 )
    ipip_CIDR=$( cat $ipip_result | grep -C15 CIDR | grep -oE "[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+/[0-9]+" | head -1 )
    # 2019.04.02 原先的已失效
    # ipip_AS=$( cat $ipip_result | grep -A1 $ipip_CIDR | grep -v $ipip_CIDR | grep -oE ">.*<" | sed "s/>//" | sed "s/<//" | head -1 )
    ipip_AS=$( cat $ipip_result | grep -A1 $ipip_CIDR | grep -v $ipip_CIDR | grep -o "$ipip_ASN.*</a" | cut -d '>' -f2 | cut -d '<' -f1 )
    ipip_rDNS=$( cat $ipip_result | grep -oE "rDNS: [a-zA-Z0-9.-]+" | sed "s/rDNS: //" )
     ipip_Loc=$( cat $ipip_result | grep -A10 "https://tools.ipip.net/traceroute.php?ip=" | grep 720px | grep -oE ">.*<" | sed "s/>//" | sed "s/<//" )
     ipip_ISP=$( cat $ipip_result | grep "display: inline-block;text-align: center;width: 720px;float: left;line-height: 46px" | sed -n '2p' | grep -oE ">.*<" | sed "s/>//" | sed "s/<//" )

    #[[ $ipip_result == $HOME/ipip_result ]] && 
    rm -f $ipip_result
}

ip_mix() {
    echo -e "${bold}正在检查服务器的地理位置（可能不准） ...${normal}"
    result=$( wget -t1 -T10 -qO- http://freeapi.ipip.net/$serveripv4 )
    country=$( echo $result | awk -F '"' '{print $2}' )
    region=$( echo $result | awk -F '"' '{print $4}' )
    city=$( echo $result | awk -F '"' '{print $6}' )
    citydisplay=$( echo "$city, ")
    #isp=$( echo $result | awk -F '"' '{print $10}' )
    echo -e "${bold}正在检查服务器的 ISP ...${normal}"
    isp=$( wget --no-check-certificate -t1 -T10 -qO- https://ipapi.co/json | grep \"org\" | awk -F '"' '{print $4}' )
    echo -e "${bold}正在检查服务器的 ASN ...${normal}"
    asn=$(wget --no-check-certificate -t1 -T10 -qO- https://ipapi.co/asn/)
}
